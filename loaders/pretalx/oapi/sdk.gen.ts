// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { ApiEventsListData, ApiEventsListResponses, RootRetrieveData, RootRetrieveResponses, AccessCodesListData, AccessCodesListResponses, AccessCodesCreateData, AccessCodesCreateResponses, AccessCodesDestroyData, AccessCodesDestroyResponses, AccessCodesRetrieveData, AccessCodesRetrieveResponses, AccessCodesPartialUpdateData, AccessCodesPartialUpdateResponses, AccessCodesUpdateData, AccessCodesUpdateResponses, AnswersListData, AnswersListResponses, AnswersCreateData, AnswersCreateResponses, AnswersDestroyData, AnswersDestroyResponses, AnswersRetrieveData, AnswersRetrieveResponses, AnswersPartialUpdateData, AnswersPartialUpdateResponses, AnswersUpdateData, AnswersUpdateResponses, MailTemplatesListData, MailTemplatesListResponses, MailTemplatesCreateData, MailTemplatesCreateResponses, MailTemplatesDestroyData, MailTemplatesDestroyResponses, MailTemplatesRetrieveData, MailTemplatesRetrieveResponses, MailTemplatesPartialUpdateData, MailTemplatesPartialUpdateResponses, MailTemplatesUpdateData, MailTemplatesUpdateResponses, QuestionOptionsListData, QuestionOptionsListResponses, QuestionOptionsCreateData, QuestionOptionsCreateResponses, QuestionOptionsDestroyData, QuestionOptionsDestroyResponses, QuestionOptionsRetrieveData, QuestionOptionsRetrieveResponses, QuestionOptionsPartialUpdateData, QuestionOptionsPartialUpdateResponses, QuestionOptionsUpdateData, QuestionOptionsUpdateResponses, QuestionsListData, QuestionsListResponses, QuestionsCreateData, QuestionsCreateResponses, QuestionsDestroyData, QuestionsDestroyResponses, QuestionsRetrieveData, QuestionsRetrieveResponses, QuestionsPartialUpdateData, QuestionsPartialUpdateResponses, QuestionsUpdateData, QuestionsUpdateResponses, ReviewsListData, ReviewsListResponses, ReviewsCreateData, ReviewsCreateResponses, ReviewsDestroyData, ReviewsDestroyResponses, ReviewsRetrieveData, ReviewsRetrieveResponses, ReviewsPartialUpdateData, ReviewsPartialUpdateResponses, ReviewsUpdateData, ReviewsUpdateResponses, RoomsListData, RoomsListResponses, RoomsCreateData, RoomsCreateResponses, RoomsDestroyData, RoomsDestroyResponses, RoomsRetrieveData, RoomsRetrieveResponses, RoomsPartialUpdateData, RoomsPartialUpdateResponses, RoomsUpdateData, RoomsUpdateResponses, SchedulesListData, SchedulesListResponses, SchedulesRetrieveData, SchedulesRetrieveResponses, SchedulesExportersRetrieveData, SchedulesExportersRetrieveResponses, SchedulesExportersRetrieveErrors, SchedulesByVersionRetrieveData, SchedulesByVersionRetrieveErrors, SchedulesReleaseCreateData, SchedulesReleaseCreateResponses, SchedulesReleaseCreateErrors, SlotsListData, SlotsListResponses, SlotsRetrieveData, SlotsRetrieveResponses, SlotsPartialUpdateData, SlotsPartialUpdateResponses, SlotsUpdateData, SlotsUpdateResponses, SlotsIcalRetrieveData, SlotsIcalRetrieveResponses, SpeakerInformationListData, SpeakerInformationListResponses, SpeakerInformationCreateData, SpeakerInformationCreateResponses, SpeakerInformationDestroyData, SpeakerInformationDestroyResponses, SpeakerInformationRetrieveData, SpeakerInformationRetrieveResponses, SpeakerInformationPartialUpdateData, SpeakerInformationPartialUpdateResponses, SpeakerInformationUpdateData, SpeakerInformationUpdateResponses, SpeakersListData, SpeakersListResponses, SpeakersRetrieveData, SpeakersRetrieveResponses, SpeakersPartialUpdateData, SpeakersPartialUpdateResponses, SpeakersUpdateData, SpeakersUpdateResponses, SubmissionTypesListData, SubmissionTypesListResponses, SubmissionTypesCreateData, SubmissionTypesCreateResponses, SubmissionTypesDestroyData, SubmissionTypesDestroyResponses, SubmissionTypesRetrieveData, SubmissionTypesRetrieveResponses, SubmissionTypesPartialUpdateData, SubmissionTypesPartialUpdateResponses, SubmissionTypesUpdateData, SubmissionTypesUpdateResponses, SubmissionsListData, SubmissionsListResponses, SubmissionsCreateData, SubmissionsCreateResponses, SubmissionsDestroyData, SubmissionsDestroyResponses, SubmissionsRetrieveData, SubmissionsRetrieveResponses, SubmissionsPartialUpdateData, SubmissionsPartialUpdateResponses, SubmissionsUpdateData, SubmissionsUpdateResponses, SubmissionsAcceptCreateData, SubmissionsAcceptCreateResponses, SubmissionsAddSpeakerCreateData, SubmissionsAddSpeakerCreateResponses, SubmissionsCancelCreateData, SubmissionsCancelCreateResponses, SubmissionsConfirmCreateData, SubmissionsConfirmCreateResponses, SubmissionsMakeSubmittedCreateData, SubmissionsMakeSubmittedCreateResponses, SubmissionsRejectCreateData, SubmissionsRejectCreateResponses, SubmissionsRemoveSpeakerCreateData, SubmissionsRemoveSpeakerCreateResponses, SubmissionsFavouriteDestroyData, SubmissionsFavouriteDestroyResponses, SubmissionsFavouriteDestroyErrors, SubmissionsFavouriteCreateData, SubmissionsFavouriteCreateResponses, SubmissionsFavouriteCreateErrors, SubmissionsFavouritesRetrieveData, SubmissionsFavouritesRetrieveResponses, TagsListData, TagsListResponses, TagsCreateData, TagsCreateResponses, TagsDestroyData, TagsDestroyResponses, TagsRetrieveData, TagsRetrieveResponses, TagsPartialUpdateData, TagsPartialUpdateResponses, TagsUpdateData, TagsUpdateResponses, TracksListData, TracksListResponses, TracksCreateData, TracksCreateResponses, TracksDestroyData, TracksDestroyResponses, TracksRetrieveData, TracksRetrieveResponses, TracksPartialUpdateData, TracksPartialUpdateResponses, TracksUpdateData, TracksUpdateResponses, ApiOrganisersTeamsListData, ApiOrganisersTeamsListResponses, ApiOrganisersTeamsCreateData, ApiOrganisersTeamsCreateResponses, ApiOrganisersTeamsDestroyData, ApiOrganisersTeamsDestroyResponses, ApiOrganisersTeamsRetrieveData, ApiOrganisersTeamsRetrieveResponses, ApiOrganisersTeamsPartialUpdateData, ApiOrganisersTeamsPartialUpdateResponses, ApiOrganisersTeamsUpdateData, ApiOrganisersTeamsUpdateResponses, ApiOrganisersTeamsInviteCreateData, ApiOrganisersTeamsInviteCreateResponses, ApiOrganisersTeamsInvitesDestroyData, ApiOrganisersTeamsInvitesDestroyResponses, ApiOrganisersTeamsRemoveMemberCreateData, ApiOrganisersTeamsRemoveMemberCreateResponses, ApiOrganisersTeamsRemoveMemberCreateErrors, FileUploadData, FileUploadResponses, FileUploadErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Events
 */
export const apiEventsList = <ThrowOnError extends boolean = false>(options?: Options<ApiEventsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiEventsListResponses, unknown, ThrowOnError>({
        url: '/api/events/',
        ...options
    });
};

/**
 * Show Events
 */
export const rootRetrieve = <ThrowOnError extends boolean = false>(options: Options<RootRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RootRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/',
        ...options
    });
};

/**
 * List Access Codes
 */
export const accessCodesList = <ThrowOnError extends boolean = false>(options: Options<AccessCodesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccessCodesListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/access-codes/',
        ...options
    });
};

/**
 * Create Access Code
 */
export const accessCodesCreate = <ThrowOnError extends boolean = false>(options: Options<AccessCodesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AccessCodesCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/access-codes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Access Code
 */
export const accessCodesDestroy = <ThrowOnError extends boolean = false>(options: Options<AccessCodesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AccessCodesDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/access-codes/{id}/',
        ...options
    });
};

/**
 * Show Access Code
 */
export const accessCodesRetrieve = <ThrowOnError extends boolean = false>(options: Options<AccessCodesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AccessCodesRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/access-codes/{id}/',
        ...options
    });
};

/**
 * Update Access Code (Partial Update)
 */
export const accessCodesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AccessCodesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AccessCodesPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/access-codes/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Access Code
 */
export const accessCodesUpdate = <ThrowOnError extends boolean = false>(options: Options<AccessCodesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AccessCodesUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/access-codes/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Answers
 */
export const answersList = <ThrowOnError extends boolean = false>(options: Options<AnswersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnswersListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/answers/',
        ...options
    });
};

/**
 * Create Answer
 */
export const answersCreate = <ThrowOnError extends boolean = false>(options: Options<AnswersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AnswersCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/answers/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Answer
 */
export const answersDestroy = <ThrowOnError extends boolean = false>(options: Options<AnswersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AnswersDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/answers/{id}/',
        ...options
    });
};

/**
 * Show Answer
 */
export const answersRetrieve = <ThrowOnError extends boolean = false>(options: Options<AnswersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnswersRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/answers/{id}/',
        ...options
    });
};

/**
 * Update Answer (Partial Update)
 * Please note that you cannot change an answer’s related objects (question, submission, review, person).
 */
export const answersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<AnswersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AnswersPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/answers/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Answer
 * Please note that you cannot change an answer’s related objects (question, submission, review, person).
 */
export const answersUpdate = <ThrowOnError extends boolean = false>(options: Options<AnswersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AnswersUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/answers/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Mail Templates
 */
export const mailTemplatesList = <ThrowOnError extends boolean = false>(options: Options<MailTemplatesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MailTemplatesListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/mail-templates/',
        ...options
    });
};

/**
 * Create Mail Template
 */
export const mailTemplatesCreate = <ThrowOnError extends boolean = false>(options: Options<MailTemplatesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MailTemplatesCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/mail-templates/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Mail Template
 */
export const mailTemplatesDestroy = <ThrowOnError extends boolean = false>(options: Options<MailTemplatesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MailTemplatesDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/mail-templates/{id}/',
        ...options
    });
};

/**
 * Show Mail Template
 */
export const mailTemplatesRetrieve = <ThrowOnError extends boolean = false>(options: Options<MailTemplatesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MailTemplatesRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/mail-templates/{id}/',
        ...options
    });
};

/**
 * Update Mail Template (Partial Update)
 */
export const mailTemplatesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<MailTemplatesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MailTemplatesPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/mail-templates/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Mail Template
 */
export const mailTemplatesUpdate = <ThrowOnError extends boolean = false>(options: Options<MailTemplatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MailTemplatesUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/mail-templates/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Question Options
 */
export const questionOptionsList = <ThrowOnError extends boolean = false>(options: Options<QuestionOptionsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionOptionsListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/question-options/',
        ...options
    });
};

/**
 * Create Question Option
 */
export const questionOptionsCreate = <ThrowOnError extends boolean = false>(options: Options<QuestionOptionsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuestionOptionsCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/question-options/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Question Option
 * Deleting a question option is only possible if it hasn't been used in any answers yet.
 */
export const questionOptionsDestroy = <ThrowOnError extends boolean = false>(options: Options<QuestionOptionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<QuestionOptionsDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/question-options/{id}/',
        ...options
    });
};

/**
 * Show Question Option
 */
export const questionOptionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<QuestionOptionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionOptionsRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/question-options/{id}/',
        ...options
    });
};

/**
 * Update Question Option (Partial Update)
 */
export const questionOptionsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<QuestionOptionsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<QuestionOptionsPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/question-options/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Question Option
 */
export const questionOptionsUpdate = <ThrowOnError extends boolean = false>(options: Options<QuestionOptionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<QuestionOptionsUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/question-options/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Questions
 */
export const questionsList = <ThrowOnError extends boolean = false>(options: Options<QuestionsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionsListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/questions/',
        ...options
    });
};

/**
 * Create Question
 */
export const questionsCreate = <ThrowOnError extends boolean = false>(options: Options<QuestionsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuestionsCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/questions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Question
 */
export const questionsDestroy = <ThrowOnError extends boolean = false>(options: Options<QuestionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<QuestionsDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/questions/{id}/',
        ...options
    });
};

/**
 * Show Question
 */
export const questionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<QuestionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionsRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/questions/{id}/',
        ...options
    });
};

/**
 * Update Question (Partial Update)
 * Please note that any update to the options field will delete the existing question options (if still possible) and replace them with the new ones. Use the AnswerOption API for granular question option modifications.
 */
export const questionsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<QuestionsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<QuestionsPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/questions/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Question
 * Please note that any update to the options field will delete the existing question options (if still possible) and replace them with the new ones. Use the AnswerOption API for granular question option modifications.
 */
export const questionsUpdate = <ThrowOnError extends boolean = false>(options: Options<QuestionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<QuestionsUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/questions/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Reviews
 */
export const reviewsList = <ThrowOnError extends boolean = false>(options: Options<ReviewsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReviewsListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/reviews/',
        ...options
    });
};

/**
 * Create Review
 */
export const reviewsCreate = <ThrowOnError extends boolean = false>(options: Options<ReviewsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ReviewsCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/reviews/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Reviews
 */
export const reviewsDestroy = <ThrowOnError extends boolean = false>(options: Options<ReviewsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ReviewsDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/reviews/{id}/',
        ...options
    });
};

/**
 * Show Review
 */
export const reviewsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ReviewsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReviewsRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/reviews/{id}/',
        ...options
    });
};

/**
 * Update Reviews (Partial Update)
 */
export const reviewsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ReviewsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ReviewsPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/reviews/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Reviews
 */
export const reviewsUpdate = <ThrowOnError extends boolean = false>(options: Options<ReviewsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReviewsUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/reviews/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Rooms
 */
export const roomsList = <ThrowOnError extends boolean = false>(options: Options<RoomsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RoomsListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/rooms/',
        ...options
    });
};

/**
 * Create Rooms
 */
export const roomsCreate = <ThrowOnError extends boolean = false>(options: Options<RoomsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RoomsCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/rooms/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Rooms
 */
export const roomsDestroy = <ThrowOnError extends boolean = false>(options: Options<RoomsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RoomsDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/rooms/{id}/',
        ...options
    });
};

/**
 * Show Rooms
 */
export const roomsRetrieve = <ThrowOnError extends boolean = false>(options: Options<RoomsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RoomsRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/rooms/{id}/',
        ...options
    });
};

/**
 * Update Rooms (Partial Update)
 */
export const roomsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RoomsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RoomsPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/rooms/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Rooms
 */
export const roomsUpdate = <ThrowOnError extends boolean = false>(options: Options<RoomsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RoomsUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/rooms/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Schedules
 * This endpoint returns a list of schedules. As schedule data can get very complex when expanded, the list endpoint only contains metadata. Please refer to the detail endpoint documentation to see how to retrieve slots, submissions and speakers.
 */
export const schedulesList = <ThrowOnError extends boolean = false>(options: Options<SchedulesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SchedulesListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/schedules/',
        ...options
    });
};

/**
 * Show Schedule
 * In addition to the standard lookup by ID, you can also use the special /wip/ and /latest/ URL paths to access the unpublished and latest published schedules. To receive most schedule data, query the endpoint with ``?expand=room,slots.submission.speakers``.
 */
export const schedulesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SchedulesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SchedulesRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/schedules/{id}/',
        ...options
    });
};

/**
 * Get Exporter Content
 * Retrieve the content of a specific schedule exporter by name.
 */
export const schedulesExportersRetrieve = <ThrowOnError extends boolean = false>(options: Options<SchedulesExportersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SchedulesExportersRetrieveResponses, SchedulesExportersRetrieveErrors, ThrowOnError>({
        url: '/api/events/{event}/schedules/{id}/exporters/{name}/',
        ...options
    });
};

/**
 * Redirect to a schedule by its version
 * This endpoint redirects to a specific schedule using its version name (e.g., '1.0', 'My Release') instead of its numeric ID.
 */
export const schedulesByVersionRetrieve = <ThrowOnError extends boolean = false>(options: Options<SchedulesByVersionRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, SchedulesByVersionRetrieveErrors, ThrowOnError>({
        url: '/api/events/{event}/schedules/by-version/',
        ...options
    });
};

/**
 * Release a new schedule version
 * Freezes the current Work-in-Progress (WIP) schedule, creating a new named version. This makes the WIP schedule available under the given version name and creates a new empty WIP schedule.
 */
export const schedulesReleaseCreate = <ThrowOnError extends boolean = false>(options: Options<SchedulesReleaseCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SchedulesReleaseCreateResponses, SchedulesReleaseCreateErrors, ThrowOnError>({
        url: '/api/events/{event}/schedules/release/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Talk Slots
 * This endpoint always returns a filtered list. If you don’t provide any filters of your own, it will be filtered to show only talk slots in the latest published schedule.
 */
export const slotsList = <ThrowOnError extends boolean = false>(options: Options<SlotsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlotsListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/slots/',
        ...options
    });
};

/**
 * Show Talk Slot
 */
export const slotsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlotsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlotsRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/slots/{id}/',
        ...options
    });
};

/**
 * Update Talk Slot (Partial Update)
 * Only talk slots in the WIP schedule can be changed – once a schedule version is frozen, its talk slots can’t be modified anymore.
 */
export const slotsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SlotsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SlotsPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/slots/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Talk Slot
 * Only talk slots in the WIP schedule can be changed – once a schedule version is frozen, its talk slots can’t be modified anymore.
 */
export const slotsUpdate = <ThrowOnError extends boolean = false>(options: Options<SlotsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SlotsUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/slots/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Export Talk Slot as iCalendar file
 * Export a single talk slot as an iCalendar file.
 */
export const slotsIcalRetrieve = <ThrowOnError extends boolean = false>(options: Options<SlotsIcalRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SlotsIcalRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/slots/{id}/ical/',
        ...options
    });
};

/**
 * List Speaker Information
 */
export const speakerInformationList = <ThrowOnError extends boolean = false>(options: Options<SpeakerInformationListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SpeakerInformationListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speaker-information/',
        ...options
    });
};

/**
 * Create Speaker Information
 */
export const speakerInformationCreate = <ThrowOnError extends boolean = false>(options: Options<SpeakerInformationCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SpeakerInformationCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speaker-information/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Speaker Information
 */
export const speakerInformationDestroy = <ThrowOnError extends boolean = false>(options: Options<SpeakerInformationDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SpeakerInformationDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speaker-information/{id}/',
        ...options
    });
};

/**
 * Show Speaker Information
 */
export const speakerInformationRetrieve = <ThrowOnError extends boolean = false>(options: Options<SpeakerInformationRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SpeakerInformationRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speaker-information/{id}/',
        ...options
    });
};

/**
 * Update Speaker Information (Partial Update)
 */
export const speakerInformationPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SpeakerInformationPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SpeakerInformationPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speaker-information/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Speaker Information
 */
export const speakerInformationUpdate = <ThrowOnError extends boolean = false>(options: Options<SpeakerInformationUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SpeakerInformationUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speaker-information/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Speakers
 */
export const speakersList = <ThrowOnError extends boolean = false>(options: Options<SpeakersListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SpeakersListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speakers/',
        ...options
    });
};

/**
 * Show Speaker
 */
export const speakersRetrieve = <ThrowOnError extends boolean = false>(options: Options<SpeakersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SpeakersRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speakers/{user__code__iexact}/',
        ...options
    });
};

/**
 * Update Speaker (Partial Update)
 */
export const speakersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SpeakersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SpeakersPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speakers/{user__code__iexact}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Speaker
 */
export const speakersUpdate = <ThrowOnError extends boolean = false>(options: Options<SpeakersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SpeakersUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/speakers/{user__code__iexact}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Submission Types
 */
export const submissionTypesList = <ThrowOnError extends boolean = false>(options: Options<SubmissionTypesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubmissionTypesListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submission-types/',
        ...options
    });
};

/**
 * Create Submission Types
 */
export const submissionTypesCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionTypesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionTypesCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submission-types/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Submission Types
 */
export const submissionTypesDestroy = <ThrowOnError extends boolean = false>(options: Options<SubmissionTypesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubmissionTypesDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submission-types/{id}/',
        ...options
    });
};

/**
 * Show Submission Types
 */
export const submissionTypesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SubmissionTypesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubmissionTypesRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submission-types/{id}/',
        ...options
    });
};

/**
 * Update Submission Types (Partial Update)
 */
export const submissionTypesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SubmissionTypesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubmissionTypesPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submission-types/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Submission Types
 */
export const submissionTypesUpdate = <ThrowOnError extends boolean = false>(options: Options<SubmissionTypesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SubmissionTypesUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submission-types/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Submissions
 */
export const submissionsList = <ThrowOnError extends boolean = false>(options: Options<SubmissionsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubmissionsListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/',
        ...options
    });
};

/**
 * Create Submission
 * Note that a submission created via the API will start in the submitted state and without speakers. No notification emails will be sent, and the submission may be in an invalid state (e.g. if the event has required custom fields).
 */
export const submissionsCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Submission
 * This endpoint is only available to server administrators.
 */
export const submissionsDestroy = <ThrowOnError extends boolean = false>(options: Options<SubmissionsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubmissionsDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/',
        ...options
    });
};

/**
 * Show Submission
 */
export const submissionsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SubmissionsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubmissionsRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/',
        ...options
    });
};

/**
 * Update Submission (Partial Update)
 */
export const submissionsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubmissionsPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Submission
 */
export const submissionsUpdate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SubmissionsUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Accept Submission
 */
export const submissionsAcceptCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsAcceptCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsAcceptCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/accept/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add Speaker to Submission
 */
export const submissionsAddSpeakerCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsAddSpeakerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsAddSpeakerCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/add-speaker/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel Submission
 */
export const submissionsCancelCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsCancelCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsCancelCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/cancel/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Confirm Submission
 */
export const submissionsConfirmCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsConfirmCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsConfirmCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/confirm/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Make Submission Submitted
 */
export const submissionsMakeSubmittedCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsMakeSubmittedCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsMakeSubmittedCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/make-submitted/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reject Submission
 */
export const submissionsRejectCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsRejectCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsRejectCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/reject/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Speaker from Submission
 */
export const submissionsRemoveSpeakerCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsRemoveSpeakerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsRemoveSpeakerCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code__iexact}/remove-speaker/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add or remove a submission from favourites
 * This endpoint is used by the schedule widget and uses session authentication.
 */
export const submissionsFavouriteDestroy = <ThrowOnError extends boolean = false>(options: Options<SubmissionsFavouriteDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubmissionsFavouriteDestroyResponses, SubmissionsFavouriteDestroyErrors, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code}/favourite/',
        ...options
    });
};

/**
 * Add or remove a submission from favourites
 * This endpoint is used by the schedule widget and uses session authentication.
 */
export const submissionsFavouriteCreate = <ThrowOnError extends boolean = false>(options: Options<SubmissionsFavouriteCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmissionsFavouriteCreateResponses, SubmissionsFavouriteCreateErrors, ThrowOnError>({
        url: '/api/events/{event}/submissions/{code}/favourite/',
        ...options
    });
};

/**
 * List favourite submissions
 * This endpoint is used by the schedule widget and uses session authentication.
 */
export const submissionsFavouritesRetrieve = <ThrowOnError extends boolean = false>(options: Options<SubmissionsFavouritesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubmissionsFavouritesRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/submissions/favourites/',
        ...options
    });
};

/**
 * List tags
 */
export const tagsList = <ThrowOnError extends boolean = false>(options: Options<TagsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagsListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tags/',
        ...options
    });
};

/**
 * Create Tags
 */
export const tagsCreate = <ThrowOnError extends boolean = false>(options: Options<TagsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TagsCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tags/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Tags
 */
export const tagsDestroy = <ThrowOnError extends boolean = false>(options: Options<TagsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TagsDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tags/{id}/',
        ...options
    });
};

/**
 * Show Tags
 */
export const tagsRetrieve = <ThrowOnError extends boolean = false>(options: Options<TagsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagsRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tags/{id}/',
        ...options
    });
};

/**
 * Update Tags (Partial Update)
 */
export const tagsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<TagsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TagsPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tags/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Tags
 */
export const tagsUpdate = <ThrowOnError extends boolean = false>(options: Options<TagsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TagsUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tags/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Tracks
 */
export const tracksList = <ThrowOnError extends boolean = false>(options: Options<TracksListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TracksListResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tracks/',
        ...options
    });
};

/**
 * Create Tracks
 */
export const tracksCreate = <ThrowOnError extends boolean = false>(options: Options<TracksCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TracksCreateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tracks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Tracks
 */
export const tracksDestroy = <ThrowOnError extends boolean = false>(options: Options<TracksDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TracksDestroyResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tracks/{id}/',
        ...options
    });
};

/**
 * Show Tracks
 */
export const tracksRetrieve = <ThrowOnError extends boolean = false>(options: Options<TracksRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TracksRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tracks/{id}/',
        ...options
    });
};

/**
 * Update Tracks (Partial Update)
 */
export const tracksPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<TracksPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TracksPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tracks/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Tracks
 */
export const tracksUpdate = <ThrowOnError extends boolean = false>(options: Options<TracksUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TracksUpdateResponses, unknown, ThrowOnError>({
        url: '/api/events/{event}/tracks/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Teams
 */
export const apiOrganisersTeamsList = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiOrganisersTeamsListResponses, unknown, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/',
        ...options
    });
};

/**
 * Create Team
 */
export const apiOrganisersTeamsCreate = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiOrganisersTeamsCreateResponses, unknown, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Team
 */
export const apiOrganisersTeamsDestroy = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiOrganisersTeamsDestroyResponses, unknown, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/{id}/',
        ...options
    });
};

/**
 * Show Team
 */
export const apiOrganisersTeamsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ApiOrganisersTeamsRetrieveResponses, unknown, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/{id}/',
        ...options
    });
};

/**
 * Update Team (Partial Update)
 */
export const apiOrganisersTeamsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ApiOrganisersTeamsPartialUpdateResponses, unknown, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Team
 */
export const apiOrganisersTeamsUpdate = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ApiOrganisersTeamsUpdateResponses, unknown, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Invite Member to Team
 * Creates a team invite, and sends an invite.
 */
export const apiOrganisersTeamsInviteCreate = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsInviteCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiOrganisersTeamsInviteCreateResponses, unknown, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/{id}/invite/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Team Invite
 */
export const apiOrganisersTeamsInvitesDestroy = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsInvitesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ApiOrganisersTeamsInvitesDestroyResponses, unknown, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/{id}/invites/{invite_id}/',
        ...options
    });
};

/**
 * Remove Member from Team
 */
export const apiOrganisersTeamsRemoveMemberCreate = <ThrowOnError extends boolean = false>(options: Options<ApiOrganisersTeamsRemoveMemberCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApiOrganisersTeamsRemoveMemberCreateResponses, ApiOrganisersTeamsRemoveMemberCreateErrors, ThrowOnError>({
        url: '/api/organisers/{organiser}/teams/{id}/remove_member/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload a file (image or PDF) for temporary storage. Allowed file types: PNG, JPEG, GIF, SVG, PDF.
 */
export const fileUpload = <ThrowOnError extends boolean = false>(options?: Options<FileUploadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<FileUploadResponses, FileUploadErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/upload/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};