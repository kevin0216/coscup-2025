// This file is auto-generated by @hey-api/openapi-ts

export type AddSpeakerRequest = {
    email: string;
    name?: string | null;
    locale?: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerReadable = {
    readonly id: number;
    readonly question: number;
    answer: string;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    answer_file?: unknown;
    readonly submission: string;
    readonly review: number;
    readonly person: string | null;
    options: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerWritable = {
    answer: string;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    answer_file?: unknown;
    options: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerCreateReadable = {
    readonly id: number;
    question: number;
    answer: string;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    answer_file?: unknown;
    submission?: string | null;
    review?: number | null;
    person?: string | null;
    options?: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerCreateWritable = {
    question: number;
    answer: string;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    answer_file?: unknown;
    submission?: string | null;
    review?: number | null;
    person?: string | null;
    options?: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerCreateRequest = {
    question: number;
    answer: string;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    answer_file?: unknown;
    submission?: string | null;
    review?: number | null;
    person?: string | null;
    options?: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerOptionReadable = {
    readonly id: number;
    readonly question: number;
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerOptionWritable = {
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerOptionCreateReadable = {
    readonly id: number;
    question: number;
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerOptionCreateWritable = {
    question: number;
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerOptionCreateRequest = {
    question: number;
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerOptionRequest = {
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type AnswerRequest = {
    answer: string;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    answer_file?: unknown;
    options: Array<number>;
};

export type AvailabilityReadable = {
    start: string;
    end: string;
    /**
     * Computed field indicating if an availability fills an entire day.
     */
    readonly allDay: boolean;
};

export type AvailabilityWritable = {
    start: string;
    end: string;
};

export type AvailabilityRequest = {
    start: string;
    end: string;
};

export type BlankEnum = '';

export type EventReadable = {
    name: MultiLanguageString;
    /**
     * Short form
     * The slug may only contain letters, numbers, dots and dashes.
     */
    slug: string;
    /**
     * Event is public
     */
    is_public?: boolean;
    /**
     * Event start date
     */
    date_from: string;
    /**
     * Event end date
     */
    date_to: string;
    /**
     * All event dates will be localised and interpreted to be in this timezone.
     *
     *
     */
    timezone?: TimezoneEnum;
    /**
     * Organiser email address
     * Will be used as Reply-To in emails.
     */
    email: string;
    /**
     * Main event colour
     * Provide a hex value like #00ff00 if you want to style pretalx in your event’s colour scheme.
     */
    primary_color?: string | null;
    /**
     * Enter a custom domain, such as https://my.event.example.org
     */
    custom_domain?: string | null;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    logo?: unknown;
    /**
     * If you provide a header image, it will be displayed instead of your event’s color and/or header pattern at the top of all event pages. It will be center-aligned, so when the window shrinks, the center parts will continue to be displayed, and not stretched.
     */
    header_image?: string | null;
    /**
     * Default language
     */
    locale?: LocaleEnum;
    /**
     * Is a list of active event locales.
     */
    readonly locales: Array<string>;
    /**
     * Is a list of active content locales.
     */
    readonly content_locales: Array<string>;
};

export type EventWritable = {
    name: MultiLanguageString;
    /**
     * Short form
     * The slug may only contain letters, numbers, dots and dashes.
     */
    slug: string;
    /**
     * Event is public
     */
    is_public?: boolean;
    /**
     * Event start date
     */
    date_from: string;
    /**
     * Event end date
     */
    date_to: string;
    /**
     * All event dates will be localised and interpreted to be in this timezone.
     *
     *
     */
    timezone?: TimezoneEnum;
    /**
     * Organiser email address
     * Will be used as Reply-To in emails.
     */
    email: string;
    /**
     * Main event colour
     * Provide a hex value like #00ff00 if you want to style pretalx in your event’s colour scheme.
     */
    primary_color?: string | null;
    /**
     * Enter a custom domain, such as https://my.event.example.org
     */
    custom_domain?: string | null;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    logo?: unknown;
    /**
     * If you provide a header image, it will be displayed instead of your event’s color and/or header pattern at the top of all event pages. It will be center-aligned, so when the window shrinks, the center parts will continue to be displayed, and not stretched.
     */
    header_image?: string | null;
    /**
     * Default language
     */
    locale?: LocaleEnum;
};

export type EventList = {
    name: MultiLanguageString;
    /**
     * Short form
     * The slug may only contain letters, numbers, dots and dashes.
     */
    slug: string;
    /**
     * Event is public
     */
    is_public?: boolean;
    /**
     * Event start date
     */
    date_from: string;
    /**
     * Event end date
     */
    date_to: string;
    /**
     * All event dates will be localised and interpreted to be in this timezone.
     *
     *
     */
    timezone?: TimezoneEnum;
};

/**
 * Serializer for file upload response.
 */
export type FileResponse = {
    /**
     * Cached file identifier
     */
    id: string;
};

/**
 * * `en` - English
 * * `de` - German
 * * `de-formal` - German (formal)
 * * `ar` - Arabic
 * * `cs` - Czech
 * * `el` - Greek
 * * `es` - Spanish
 * * `fr` - French
 * * `it` - Italian
 * * `ja-jp` - Japanese
 * * `nl` - Dutch
 * * `pl` - Polish
 * * `pt-br` - Brasilian Portuguese
 * * `pt-pt` - Portuguese
 * * `vi` - Vietnamese
 * * `zh-hant` - Traditional Chinese (Taiwan)
 * * `zh-hans` - Simplified Chinese
 */
export type LocaleEnum = 'en' | 'de' | 'de-formal' | 'ar' | 'cs' | 'el' | 'es' | 'fr' | 'it' | 'ja-jp' | 'nl' | 'pl' | 'pt-br' | 'pt-pt' | 'vi' | 'zh-hant' | 'zh-hans';

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type MailTemplateReadable = {
    readonly id: number;
    role: RoleEnum;
    subject: MultiLanguageString;
    text: MultiLanguageString;
    /**
     * Change the Reply-To address if you do not want to use the default organiser address
     */
    reply_to?: string | null;
    /**
     * Enter comma separated addresses. Will receive a blind copy of every mail sent from this template. This may be a LOT!
     */
    bcc?: string | null;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type MailTemplateWritable = {
    role: RoleEnum;
    subject: MultiLanguageString;
    text: MultiLanguageString;
    /**
     * Change the Reply-To address if you do not want to use the default organiser address
     */
    reply_to?: string | null;
    /**
     * Enter comma separated addresses. Will receive a blind copy of every mail sent from this template. This may be a LOT!
     */
    bcc?: string | null;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type MailTemplateRequest = {
    subject: MultiLanguageString;
    text: MultiLanguageString;
    /**
     * Change the Reply-To address if you do not want to use the default organiser address
     */
    reply_to?: string | null;
    /**
     * Enter comma separated addresses. Will receive a blind copy of every mail sent from this template. This may be a LOT!
     */
    bcc?: string | null;
};

export type MultiLanguageString = {
    [key: string]: string;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type NestedAnswerOptionReadable = {
    readonly id: number;
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type NestedAnswerOptionWritable = {
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type NestedAnswerOptionRequest = {
    /**
     * Response
     */
    answer: MultiLanguageString;
    position?: number;
};

export type NullEnum = unknown;

export type PaginatedAnswerListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<AnswerReadable>;
};

export type PaginatedAnswerListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<AnswerWritable>;
};

export type PaginatedAnswerOptionListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<AnswerOptionReadable>;
};

export type PaginatedAnswerOptionListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<AnswerOptionWritable>;
};

export type PaginatedMailTemplateListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<MailTemplateReadable>;
};

export type PaginatedMailTemplateListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<MailTemplateWritable>;
};

export type PaginatedQuestionListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<QuestionReadable>;
};

export type PaginatedQuestionListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<QuestionWritable>;
};

export type PaginatedReviewListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<ReviewReadable>;
};

export type PaginatedReviewListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<ReviewWritable>;
};

export type PaginatedRoomListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<RoomReadable>;
};

export type PaginatedRoomListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<RoomWritable>;
};

export type PaginatedScheduleListListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<ScheduleListReadable>;
};

export type PaginatedScheduleListListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<ScheduleListWritable>;
};

export type PaginatedSpeakerInformationListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SpeakerInformationReadable>;
};

export type PaginatedSpeakerInformationListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SpeakerInformationWritable>;
};

export type PaginatedSpeakerListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SpeakerReadable>;
};

export type PaginatedSpeakerListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SpeakerWritable>;
};

export type PaginatedSubmissionListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SubmissionReadable>;
};

export type PaginatedSubmissionListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SubmissionWritable>;
};

export type PaginatedSubmissionTypeListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SubmissionTypeReadable>;
};

export type PaginatedSubmissionTypeListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SubmissionTypeWritable>;
};

export type PaginatedSubmitterAccessCodeListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SubmitterAccessCodeReadable>;
};

export type PaginatedSubmitterAccessCodeListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<SubmitterAccessCodeWritable>;
};

export type PaginatedTagListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<TagReadable>;
};

export type PaginatedTagListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<TagWritable>;
};

export type PaginatedTalkSlotListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<TalkSlotReadable>;
};

export type PaginatedTalkSlotListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<TalkSlotWritable>;
};

export type PaginatedTeamListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<TeamReadable>;
};

export type PaginatedTeamListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<TeamWritable>;
};

export type PaginatedTrackListReadable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<TrackReadable>;
};

export type PaginatedTrackListWritable = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<TrackWritable>;
};

/**
 * * `submitted` - submitted
 * * `accepted` - accepted
 * * `confirmed` - confirmed
 * * `rejected` - rejected
 * * `canceled` - canceled
 * * `withdrawn` - withdrawn
 * * `deleted` - deleted
 * * `draft` - draft
 */
export type PendingStateEnum = 'submitted' | 'accepted' | 'confirmed' | 'rejected' | 'canceled' | 'withdrawn' | 'deleted' | 'draft';

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type QuestionReadable = {
    readonly id: number;
    /**
     * Label
     */
    question: MultiLanguageString;
    /**
     * Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    help_text?: MultiLanguageString | null;
    default_answer?: string | null;
    variant?: VariantEnum;
    /**
     * Field type
     * Do you require an answer from every speaker or for every session?
     *
     * * `submission` - per proposal
     * * `speaker` - per speaker
     * * `reviewer` - for reviewers
     */
    target?: TargetEnum;
    /**
     * Set a deadline to make this field required after the given date.
     */
    deadline?: string | null;
    /**
     * Set a deadline to stop changes to responses after the given date.
     */
    freeze_after?: string | null;
    /**
     * Field required
     */
    question_required?: QuestionRequiredEnum;
    position?: number;
    /**
     * You can limit this field to some tracks. Leave empty to apply to all tracks.
     */
    tracks?: Array<number>;
    /**
     * Session Types
     * You can limit this field to some session types. Leave empty to apply to all session types.
     */
    submission_types?: Array<number>;
    options: Array<number>;
    /**
     * Minimum text length
     * Minimum allowed text in characters or words (set in CfP settings).
     */
    min_length?: number | null;
    /**
     * Maximum text length
     * Maximum allowed text length in characters or words (set in CfP settings).
     */
    max_length?: number | null;
    /**
     * Minimum value
     */
    min_number?: string | null;
    /**
     * Maximum value
     */
    max_number?: string | null;
    /**
     * Minimum value
     */
    min_date?: string | null;
    /**
     * Maximum value
     */
    max_date?: string | null;
    /**
     * Minimum value
     */
    min_datetime?: string | null;
    /**
     * Maximum value
     */
    max_datetime?: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type QuestionWritable = {
    /**
     * Label
     */
    question: MultiLanguageString;
    /**
     * Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    help_text?: MultiLanguageString | null;
    default_answer?: string | null;
    variant?: VariantEnum;
    /**
     * Field type
     * Do you require an answer from every speaker or for every session?
     *
     * * `submission` - per proposal
     * * `speaker` - per speaker
     * * `reviewer` - for reviewers
     */
    target?: TargetEnum;
    /**
     * Set a deadline to make this field required after the given date.
     */
    deadline?: string | null;
    /**
     * Set a deadline to stop changes to responses after the given date.
     */
    freeze_after?: string | null;
    /**
     * Field required
     */
    question_required?: QuestionRequiredEnum;
    position?: number;
    /**
     * You can limit this field to some tracks. Leave empty to apply to all tracks.
     */
    tracks?: Array<number>;
    /**
     * Session Types
     * You can limit this field to some session types. Leave empty to apply to all session types.
     */
    submission_types?: Array<number>;
    options: Array<number>;
    /**
     * Minimum text length
     * Minimum allowed text in characters or words (set in CfP settings).
     */
    min_length?: number | null;
    /**
     * Maximum text length
     * Maximum allowed text length in characters or words (set in CfP settings).
     */
    max_length?: number | null;
    /**
     * Minimum value
     */
    min_number?: string | null;
    /**
     * Maximum value
     */
    max_number?: string | null;
    /**
     * Minimum value
     */
    min_date?: string | null;
    /**
     * Maximum value
     */
    max_date?: string | null;
    /**
     * Minimum value
     */
    min_datetime?: string | null;
    /**
     * Maximum value
     */
    max_datetime?: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type QuestionOrgaReadable = {
    readonly id: number;
    /**
     * Label
     */
    question: MultiLanguageString;
    /**
     * Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    help_text?: MultiLanguageString | null;
    default_answer?: string | null;
    variant?: VariantEnum;
    /**
     * Field type
     * Do you require an answer from every speaker or for every session?
     *
     * * `submission` - per proposal
     * * `speaker` - per speaker
     * * `reviewer` - for reviewers
     */
    target?: TargetEnum;
    /**
     * Set a deadline to make this field required after the given date.
     */
    deadline?: string | null;
    /**
     * Set a deadline to stop changes to responses after the given date.
     */
    freeze_after?: string | null;
    /**
     * Field required
     */
    question_required?: QuestionRequiredEnum;
    position?: number;
    /**
     * You can limit this field to some tracks. Leave empty to apply to all tracks.
     */
    tracks?: Array<number>;
    /**
     * Session Types
     * You can limit this field to some session types. Leave empty to apply to all session types.
     */
    submission_types?: Array<number>;
    options?: Array<NestedAnswerOptionReadable>;
    /**
     * Minimum text length
     * Minimum allowed text in characters or words (set in CfP settings).
     */
    min_length?: number | null;
    /**
     * Maximum text length
     * Maximum allowed text length in characters or words (set in CfP settings).
     */
    max_length?: number | null;
    /**
     * Minimum value
     */
    min_number?: string | null;
    /**
     * Maximum value
     */
    max_number?: string | null;
    /**
     * Minimum value
     */
    min_date?: string | null;
    /**
     * Maximum value
     */
    max_date?: string | null;
    /**
     * Minimum value
     */
    min_datetime?: string | null;
    /**
     * Maximum value
     */
    max_datetime?: string | null;
    /**
     * Inactive fields will no longer be shown.
     */
    active?: boolean;
    /**
     * Publish answers
     * Responses will be shown on session or speaker pages as appropriate. Please note that you cannot make a field public after the first answers have been given, to allow speakers explicit consent before publishing information.
     */
    is_public?: boolean;
    /**
     * Responses contain personal data
     * If a user deletes their account, responses containing personal data will be removed, too.
     */
    contains_personal_data?: boolean;
    /**
     * Show answers to reviewers
     * Should responses to this field be shown to reviewers? This is helpful if you want to collect personal information, but use anonymous reviews.
     */
    is_visible_to_reviewers?: boolean;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type QuestionOrgaWritable = {
    /**
     * Label
     */
    question: MultiLanguageString;
    /**
     * Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    help_text?: MultiLanguageString | null;
    default_answer?: string | null;
    variant?: VariantEnum;
    /**
     * Field type
     * Do you require an answer from every speaker or for every session?
     *
     * * `submission` - per proposal
     * * `speaker` - per speaker
     * * `reviewer` - for reviewers
     */
    target?: TargetEnum;
    /**
     * Set a deadline to make this field required after the given date.
     */
    deadline?: string | null;
    /**
     * Set a deadline to stop changes to responses after the given date.
     */
    freeze_after?: string | null;
    /**
     * Field required
     */
    question_required?: QuestionRequiredEnum;
    position?: number;
    /**
     * You can limit this field to some tracks. Leave empty to apply to all tracks.
     */
    tracks?: Array<number>;
    /**
     * Session Types
     * You can limit this field to some session types. Leave empty to apply to all session types.
     */
    submission_types?: Array<number>;
    options?: Array<NestedAnswerOptionWritable>;
    /**
     * Minimum text length
     * Minimum allowed text in characters or words (set in CfP settings).
     */
    min_length?: number | null;
    /**
     * Maximum text length
     * Maximum allowed text length in characters or words (set in CfP settings).
     */
    max_length?: number | null;
    /**
     * Minimum value
     */
    min_number?: string | null;
    /**
     * Maximum value
     */
    max_number?: string | null;
    /**
     * Minimum value
     */
    min_date?: string | null;
    /**
     * Maximum value
     */
    max_date?: string | null;
    /**
     * Minimum value
     */
    min_datetime?: string | null;
    /**
     * Maximum value
     */
    max_datetime?: string | null;
    /**
     * Inactive fields will no longer be shown.
     */
    active?: boolean;
    /**
     * Publish answers
     * Responses will be shown on session or speaker pages as appropriate. Please note that you cannot make a field public after the first answers have been given, to allow speakers explicit consent before publishing information.
     */
    is_public?: boolean;
    /**
     * Responses contain personal data
     * If a user deletes their account, responses containing personal data will be removed, too.
     */
    contains_personal_data?: boolean;
    /**
     * Show answers to reviewers
     * Should responses to this field be shown to reviewers? This is helpful if you want to collect personal information, but use anonymous reviews.
     */
    is_visible_to_reviewers?: boolean;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type QuestionOrgaRequest = {
    /**
     * Label
     */
    question: MultiLanguageString;
    /**
     * Will appear just like this text below the custom input field. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    help_text?: MultiLanguageString | null;
    default_answer?: string | null;
    variant?: VariantEnum;
    /**
     * Field type
     * Do you require an answer from every speaker or for every session?
     *
     * * `submission` - per proposal
     * * `speaker` - per speaker
     * * `reviewer` - for reviewers
     */
    target?: TargetEnum;
    /**
     * Set a deadline to make this field required after the given date.
     */
    deadline?: string | null;
    /**
     * Set a deadline to stop changes to responses after the given date.
     */
    freeze_after?: string | null;
    /**
     * Field required
     */
    question_required?: QuestionRequiredEnum;
    position?: number;
    /**
     * You can limit this field to some tracks. Leave empty to apply to all tracks.
     */
    tracks?: Array<number>;
    /**
     * Session Types
     * You can limit this field to some session types. Leave empty to apply to all session types.
     */
    submission_types?: Array<number>;
    options?: Array<NestedAnswerOptionRequest>;
    /**
     * Minimum text length
     * Minimum allowed text in characters or words (set in CfP settings).
     */
    min_length?: number | null;
    /**
     * Maximum text length
     * Maximum allowed text length in characters or words (set in CfP settings).
     */
    max_length?: number | null;
    /**
     * Minimum value
     */
    min_number?: string | null;
    /**
     * Maximum value
     */
    max_number?: string | null;
    /**
     * Minimum value
     */
    min_date?: string | null;
    /**
     * Maximum value
     */
    max_date?: string | null;
    /**
     * Minimum value
     */
    min_datetime?: string | null;
    /**
     * Maximum value
     */
    max_datetime?: string | null;
    /**
     * Inactive fields will no longer be shown.
     */
    active?: boolean;
    /**
     * Publish answers
     * Responses will be shown on session or speaker pages as appropriate. Please note that you cannot make a field public after the first answers have been given, to allow speakers explicit consent before publishing information.
     */
    is_public?: boolean;
    /**
     * Responses contain personal data
     * If a user deletes their account, responses containing personal data will be removed, too.
     */
    contains_personal_data?: boolean;
    /**
     * Show answers to reviewers
     * Should responses to this field be shown to reviewers? This is helpful if you want to collect personal information, but use anonymous reviews.
     */
    is_visible_to_reviewers?: boolean;
};

/**
 * * `optional` - always optional
 * * `required` - always required
 * * `after_deadline` - required after a deadline
 */
export type QuestionRequiredEnum = 'optional' | 'required' | 'after_deadline';

export type RemoveSpeakerRequest = {
    user: string;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ReviewReadable = {
    readonly id: number;
    submission: string;
    /**
     * What do you think?
     */
    text?: string | null;
    readonly score: string | null;
    scores: Array<ReviewScoreReadable>;
    readonly answers: Array<AnswerReadable>;
    readonly user: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ReviewWritable = {
    submission: string;
    /**
     * What do you think?
     */
    text?: string | null;
    scores: Array<ReviewScoreWritable>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ReviewScoreReadable = {
    readonly id: number;
    category: number;
    value: string;
    label?: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ReviewScoreWritable = {
    category: number;
    value: string;
    label?: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ReviewWriteRequest = {
    submission: string;
    /**
     * What do you think?
     */
    text?: string | null;
    scores: Array<number>;
    answers?: Array<number>;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type RoomReadable = {
    readonly id: number;
    name: MultiLanguageString;
    /**
     * A description for attendees, for example directions.
     */
    description?: MultiLanguageString | null;
    /**
     * The uuid field is equal the the guid field if a guid has been set. Otherwise, it will contain a computed (stable) UUID.
     */
    readonly uuid: string;
    /**
     * Unique identifier (UUID) to help external tools identify the room.
     */
    guid?: string | null;
    /**
     * How many people can fit in the room?
     */
    capacity?: number | null;
    position?: number | null;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type RoomWritable = {
    name: MultiLanguageString;
    /**
     * A description for attendees, for example directions.
     */
    description?: MultiLanguageString | null;
    /**
     * Unique identifier (UUID) to help external tools identify the room.
     */
    guid?: string | null;
    /**
     * How many people can fit in the room?
     */
    capacity?: number | null;
    position?: number | null;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type RoomOrgaReadable = {
    readonly id: number;
    name: MultiLanguageString;
    /**
     * A description for attendees, for example directions.
     */
    description?: MultiLanguageString | null;
    /**
     * The uuid field is equal the the guid field if a guid has been set. Otherwise, it will contain a computed (stable) UUID.
     */
    readonly uuid: string;
    /**
     * Unique identifier (UUID) to help external tools identify the room.
     */
    guid?: string | null;
    /**
     * How many people can fit in the room?
     */
    capacity?: number | null;
    position?: number | null;
    /**
     * Information relevant for speakers scheduled in this room, for example room size, special directions, available adaptors for video input …
     */
    speaker_info?: MultiLanguageString | null;
    availabilities?: Array<AvailabilityReadable>;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type RoomOrgaWritable = {
    name: MultiLanguageString;
    /**
     * A description for attendees, for example directions.
     */
    description?: MultiLanguageString | null;
    /**
     * Unique identifier (UUID) to help external tools identify the room.
     */
    guid?: string | null;
    /**
     * How many people can fit in the room?
     */
    capacity?: number | null;
    position?: number | null;
    /**
     * Information relevant for speakers scheduled in this room, for example room size, special directions, available adaptors for video input …
     */
    speaker_info?: MultiLanguageString | null;
    availabilities?: Array<AvailabilityWritable>;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type RoomOrgaRequest = {
    name: MultiLanguageString;
    /**
     * A description for attendees, for example directions.
     */
    description?: MultiLanguageString | null;
    /**
     * Unique identifier (UUID) to help external tools identify the room.
     */
    guid?: string | null;
    /**
     * How many people can fit in the room?
     */
    capacity?: number | null;
    position?: number | null;
    /**
     * Information relevant for speakers scheduled in this room, for example room size, special directions, available adaptors for video input …
     */
    speaker_info?: MultiLanguageString | null;
    availabilities?: Array<AvailabilityRequest>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ScheduleReadable = {
    readonly id: number;
    version: string;
    published?: string | null;
    /**
     * This text will be shown in the public changelog and the RSS feed. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    comment?: MultiLanguageString | null;
    readonly slots: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ScheduleWritable = {
    version: string;
    published?: string | null;
    /**
     * This text will be shown in the public changelog and the RSS feed. You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    comment?: MultiLanguageString | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ScheduleListReadable = {
    readonly id: number;
    version: string;
    published?: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type ScheduleListWritable = {
    version: string;
    published?: string | null;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type ScheduleReleaseRequest = {
    version: string;
    comment?: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SpeakerReadable = {
    readonly code: string;
    name: string;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    biography?: string | null;
    readonly submissions: Array<string>;
    readonly avatar_url: string;
    readonly answers: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SpeakerWritable = {
    name: string;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    biography?: string | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SpeakerInformationReadable = {
    readonly id: number;
    target_group?: TargetGroupEnum;
    /**
     * Subject
     */
    title: MultiLanguageString;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    text: MultiLanguageString;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    resource?: unknown;
    /**
     * Limit to tracks
     * Leave empty to show this information to all tracks.
     */
    limit_tracks?: Array<number>;
    /**
     * Limit to proposal types
     * Leave empty to show this information for all proposal types.
     */
    limit_types?: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SpeakerInformationWritable = {
    target_group?: TargetGroupEnum;
    /**
     * Subject
     */
    title: MultiLanguageString;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    text: MultiLanguageString;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    resource?: unknown;
    /**
     * Limit to tracks
     * Leave empty to show this information to all tracks.
     */
    limit_tracks?: Array<number>;
    /**
     * Limit to proposal types
     * Leave empty to show this information for all proposal types.
     */
    limit_types?: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SpeakerInformationRequest = {
    target_group?: TargetGroupEnum;
    /**
     * Subject
     */
    title: MultiLanguageString;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    text: MultiLanguageString;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    resource?: unknown;
    /**
     * Limit to tracks
     * Leave empty to show this information to all tracks.
     */
    limit_tracks?: Array<number>;
    /**
     * Limit to proposal types
     * Leave empty to show this information for all proposal types.
     */
    limit_types?: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SpeakerOrgaReadable = {
    readonly code: string;
    name: string;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    biography?: string | null;
    readonly submissions: Array<string>;
    readonly avatar_url: string;
    readonly answers: Array<number>;
    email: string;
    readonly timezone: string;
    readonly locale: string;
    /**
     * The speaker has arrived
     */
    has_arrived?: boolean;
    availabilities?: Array<AvailabilityReadable>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SpeakerOrgaWritable = {
    name: string;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    biography?: string | null;
    email: string;
    /**
     * The speaker has arrived
     */
    has_arrived?: boolean;
    availabilities?: Array<AvailabilityWritable>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SpeakerUpdateRequest = {
    name: string;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    biography?: string | null;
    email: string;
    /**
     * The speaker has arrived
     */
    has_arrived?: boolean;
    availabilities?: Array<AvailabilityRequest>;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    avatar?: unknown;
};

/**
 * * `submitted` - submitted
 * * `accepted` - accepted
 * * `confirmed` - confirmed
 * * `rejected` - rejected
 * * `canceled` - canceled
 * * `withdrawn` - withdrawn
 * * `deleted` - deleted
 * * `draft` - draft
 */
export type StateEnum = 'submitted' | 'accepted' | 'confirmed' | 'rejected' | 'canceled' | 'withdrawn' | 'deleted' | 'draft';

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmissionReadable = {
    readonly code: string;
    /**
     * Proposal title
     */
    title: string;
    readonly speakers: Array<string>;
    submission_type: number;
    track?: number | null;
    tags?: Array<number>;
    /**
     * Proposal state
     */
    state: StateEnum;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    abstract?: string | null;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    description?: string | null;
    /**
     * Defaults to the submission type’s duration
     */
    duration?: number;
    /**
     * How many times this session will take place.
     */
    slot_count?: number;
    /**
     * Language
     */
    content_locale?: string;
    /**
     * Don’t record this session.
     */
    do_not_record?: boolean;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    image?: unknown;
    readonly resources: Array<number>;
    readonly slots: Array<number>;
    readonly answers: Array<number>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmissionWritable = {
    /**
     * Proposal title
     */
    title: string;
    submission_type: number;
    track?: number | null;
    tags?: Array<number>;
    /**
     * Proposal state
     */
    state: StateEnum;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    abstract?: string | null;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    description?: string | null;
    /**
     * Defaults to the submission type’s duration
     */
    duration?: number;
    /**
     * How many times this session will take place.
     */
    slot_count?: number;
    /**
     * Language
     */
    content_locale?: string;
    /**
     * Don’t record this session.
     */
    do_not_record?: boolean;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    image?: unknown;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmissionOrgaReadable = {
    readonly code: string;
    /**
     * Proposal title
     */
    title: string;
    readonly speakers: Array<string>;
    submission_type: number;
    track?: number | null;
    tags?: Array<number>;
    /**
     * Proposal state
     */
    state: StateEnum;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    abstract?: string | null;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    description?: string | null;
    /**
     * Defaults to the submission type’s duration
     */
    duration?: number;
    /**
     * How many times this session will take place.
     */
    slot_count?: number;
    /**
     * Language
     */
    content_locale?: string;
    /**
     * Don’t record this session.
     */
    do_not_record?: boolean;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    image?: unknown;
    readonly resources: Array<number>;
    readonly slots: Array<number>;
    readonly answers: Array<number>;
    /**
     * Pending proposal state
     */
    pending_state?: PendingStateEnum | BlankEnum | NullEnum | null;
    /**
     * Show this session in public list of featured sessions.
     */
    is_featured?: boolean;
    /**
     * These notes are meant for the organiser and won’t be made public.
     */
    notes?: string | null;
    /**
     * Internal notes for other organisers/reviewers. Not visible to the speakers or the public.
     */
    internal_notes?: string | null;
    invitation_token?: string;
    access_code?: number | null;
    review_code?: string | null;
    anonymised_data?: string | null;
    reviews?: Array<number>;
    assigned_reviewers?: Array<string | null>;
    readonly is_anonymised: boolean;
    readonly median_score: number | null;
    readonly mean_score: number | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmissionOrgaWritable = {
    /**
     * Proposal title
     */
    title: string;
    submission_type: number;
    track?: number | null;
    tags?: Array<number>;
    /**
     * Proposal state
     */
    state: StateEnum;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    abstract?: string | null;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    description?: string | null;
    /**
     * Defaults to the submission type’s duration
     */
    duration?: number;
    /**
     * How many times this session will take place.
     */
    slot_count?: number;
    /**
     * Language
     */
    content_locale?: string;
    /**
     * Don’t record this session.
     */
    do_not_record?: boolean;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    image?: unknown;
    /**
     * Pending proposal state
     */
    pending_state?: PendingStateEnum | BlankEnum | NullEnum | null;
    /**
     * Show this session in public list of featured sessions.
     */
    is_featured?: boolean;
    /**
     * These notes are meant for the organiser and won’t be made public.
     */
    notes?: string | null;
    /**
     * Internal notes for other organisers/reviewers. Not visible to the speakers or the public.
     */
    internal_notes?: string | null;
    invitation_token?: string;
    access_code?: number | null;
    review_code?: string | null;
    anonymised_data?: string | null;
    reviews?: Array<number>;
    assigned_reviewers?: Array<string | null>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmissionOrgaRequest = {
    /**
     * Proposal title
     */
    title: string;
    submission_type: number;
    track?: number | null;
    tags?: Array<number>;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    abstract?: string | null;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    description?: string | null;
    /**
     * Defaults to the submission type’s duration
     */
    duration?: number;
    /**
     * How many times this session will take place.
     */
    slot_count?: number;
    /**
     * Language
     */
    content_locale?: string;
    /**
     * Don’t record this session.
     */
    do_not_record?: boolean;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    image?: unknown;
    /**
     * Pending proposal state
     */
    pending_state?: PendingStateEnum | BlankEnum | NullEnum | null;
    /**
     * Show this session in public list of featured sessions.
     */
    is_featured?: boolean;
    /**
     * These notes are meant for the organiser and won’t be made public.
     */
    notes?: string | null;
    /**
     * Internal notes for other organisers/reviewers. Not visible to the speakers or the public.
     */
    internal_notes?: string | null;
    invitation_token?: string;
    access_code?: number | null;
    review_code?: string | null;
    anonymised_data?: string | null;
    reviews?: Array<number>;
    assigned_reviewers?: Array<string | null>;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmissionRequest = {
    /**
     * Proposal title
     */
    title: string;
    submission_type: number;
    track?: number | null;
    tags?: Array<number>;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    abstract?: string | null;
    /**
     * You can use <a href="https://docs.pretalx.org/user/markdown/" target="_blank" rel="noopener">Markdown</a> here.
     */
    description?: string | null;
    /**
     * Defaults to the submission type’s duration
     */
    duration?: number;
    /**
     * How many times this session will take place.
     */
    slot_count?: number;
    /**
     * Language
     */
    content_locale?: string;
    /**
     * Don’t record this session.
     */
    do_not_record?: boolean;
    /**
     * When reading data, a URL pointing to a downloadable file. When writing adata, a reference to a file uploaded via the <a href="https://docs.pretalx.org/api/fundamentals/#file-uploads">file uploads endpoint</a>.
     */
    image?: unknown;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type SubmissionTypeReadable = {
    readonly id: number;
    name: MultiLanguageString;
    /**
     * Default duration in minutes
     */
    default_duration?: number;
    /**
     * If you want a different deadline than the global deadline for this session type, enter it here.
     */
    deadline?: string | null;
    /**
     * This session type will only be shown to submitters with a matching access code.
     */
    requires_access_code?: boolean;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type SubmissionTypeWritable = {
    name: MultiLanguageString;
    /**
     * Default duration in minutes
     */
    default_duration?: number;
    /**
     * If you want a different deadline than the global deadline for this session type, enter it here.
     */
    deadline?: string | null;
    /**
     * This session type will only be shown to submitters with a matching access code.
     */
    requires_access_code?: boolean;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type SubmissionTypeRequest = {
    name: MultiLanguageString;
    /**
     * Default duration in minutes
     */
    default_duration?: number;
    /**
     * If you want a different deadline than the global deadline for this session type, enter it here.
     */
    deadline?: string | null;
    /**
     * This session type will only be shown to submitters with a matching access code.
     */
    requires_access_code?: boolean;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmitterAccessCodeReadable = {
    readonly id: number;
    /**
     * Access code
     */
    code: string;
    /**
     * You can restrict the access code to a single track, or leave it open for all tracks.
     */
    track?: number | null;
    /**
     * Session Type
     * You can restrict the access code to a single session type, or leave it open for all session types.
     */
    submission_type?: number | null;
    /**
     * You can set or change this date later to invalidate the access code.
     */
    valid_until?: string | null;
    /**
     * Numbers of times this access code can be used to submit a proposal. Leave empty for no limit.
     */
    maximum_uses?: number | null;
    readonly redeemed: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmitterAccessCodeWritable = {
    /**
     * Access code
     */
    code: string;
    /**
     * You can restrict the access code to a single track, or leave it open for all tracks.
     */
    track?: number | null;
    /**
     * Session Type
     * You can restrict the access code to a single session type, or leave it open for all session types.
     */
    submission_type?: number | null;
    /**
     * You can set or change this date later to invalidate the access code.
     */
    valid_until?: string | null;
    /**
     * Numbers of times this access code can be used to submit a proposal. Leave empty for no limit.
     */
    maximum_uses?: number | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type SubmitterAccessCodeRequest = {
    /**
     * Access code
     */
    code: string;
    /**
     * You can restrict the access code to a single track, or leave it open for all tracks.
     */
    track?: number | null;
    /**
     * Session Type
     * You can restrict the access code to a single session type, or leave it open for all session types.
     */
    submission_type?: number | null;
    /**
     * You can set or change this date later to invalidate the access code.
     */
    valid_until?: string | null;
    /**
     * Numbers of times this access code can be used to submit a proposal. Leave empty for no limit.
     */
    maximum_uses?: number | null;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type TagReadable = {
    readonly id: number;
    tag: string;
    description?: MultiLanguageString;
    color: string;
    /**
     * Show tag publicly
     * Tags are currently only in use for organisers and reviewers. They will be visible publicly in a future release of pretalx.
     */
    is_public?: boolean;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type TagWritable = {
    tag: string;
    description?: MultiLanguageString;
    color: string;
    /**
     * Show tag publicly
     * Tags are currently only in use for organisers and reviewers. They will be visible publicly in a future release of pretalx.
     */
    is_public?: boolean;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type TagRequest = {
    tag: string;
    description?: MultiLanguageString;
    color: string;
    /**
     * Show tag publicly
     * Tags are currently only in use for organisers and reviewers. They will be visible publicly in a future release of pretalx.
     */
    is_public?: boolean;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type TalkSlotReadable = {
    readonly id: number;
    /**
     * The room this talk is scheduled in, if any
     */
    room?: number | null;
    /**
     * When the talk starts, if it is currently scheduled
     */
    start?: string | null;
    end: string;
    readonly submission: string;
    readonly schedule: number;
    description?: MultiLanguageString | null;
    /**
     * Returns the actual duration in minutes if the talk is scheduled, and
     * the planned duration in minutes otherwise.
     */
    readonly duration: number;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type TalkSlotWritable = {
    /**
     * The room this talk is scheduled in, if any
     */
    room?: number | null;
    /**
     * When the talk starts, if it is currently scheduled
     */
    start?: string | null;
    end: string;
    description?: MultiLanguageString | null;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type TalkSlotRequest = {
    /**
     * The room this talk is scheduled in, if any
     */
    room?: number | null;
    /**
     * When the talk starts, if it is currently scheduled
     */
    start?: string | null;
    end: string;
    description?: MultiLanguageString | null;
};

/**
 * * `submission` - per proposal
 * * `speaker` - per speaker
 * * `reviewer` - for reviewers
 */
export type TargetEnum = 'submission' | 'speaker' | 'reviewer';

/**
 * * `submitters` - all
 * * `accepted` - All accepted speakers
 * * `confirmed` - Only confirmed speakers
 */
export type TargetGroupEnum = 'submitters' | 'accepted' | 'confirmed';

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type TeamReadable = {
    readonly id: number;
    /**
     * Team name
     */
    name: string;
    members?: Array<string | null>;
    invites?: Array<number>;
    /**
     * Apply permissions to all events by this organiser (including newly created ones)
     */
    all_events?: boolean;
    limit_events?: Array<string>;
    limit_tracks?: Array<number>;
    can_create_events?: boolean;
    /**
     * Can change teams and permissions
     */
    can_change_teams?: boolean;
    can_change_organiser_settings?: boolean;
    can_change_event_settings?: boolean;
    /**
     * Can work with and change proposals
     */
    can_change_submissions?: boolean;
    /**
     * Is a reviewer
     */
    is_reviewer?: boolean;
    /**
     * Always hide speaker names
     * Normally, anonymisation is configured in the event review settings. This setting will <strong>override the event settings</strong> and always hide speaker names for this team.
     */
    force_hide_speaker_names?: boolean;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type TeamWritable = {
    /**
     * Team name
     */
    name: string;
    members?: Array<string | null>;
    invites?: Array<number>;
    /**
     * Apply permissions to all events by this organiser (including newly created ones)
     */
    all_events?: boolean;
    limit_events?: Array<string>;
    limit_tracks?: Array<number>;
    can_create_events?: boolean;
    /**
     * Can change teams and permissions
     */
    can_change_teams?: boolean;
    can_change_organiser_settings?: boolean;
    can_change_event_settings?: boolean;
    /**
     * Can work with and change proposals
     */
    can_change_submissions?: boolean;
    /**
     * Is a reviewer
     */
    is_reviewer?: boolean;
    /**
     * Always hide speaker names
     * Normally, anonymisation is configured in the event review settings. This setting will <strong>override the event settings</strong> and always hide speaker names for this team.
     */
    force_hide_speaker_names?: boolean;
};

export type TeamInviteCreateRequest = {
    email: string;
};

export type TeamMemberRemoveRequest = {
    user_code: string;
};

/**
 * A ModelSerializer that takes additional arguments for
 * "fields", "omit" and "expand" in order to
 * control which fields are displayed, and whether to replace simple
 * values with complex, nested serializations
 */
export type TeamRequest = {
    /**
     * Team name
     */
    name: string;
    members?: Array<string | null>;
    invites?: Array<number>;
    /**
     * Apply permissions to all events by this organiser (including newly created ones)
     */
    all_events?: boolean;
    limit_events?: Array<string>;
    limit_tracks?: Array<number>;
    can_create_events?: boolean;
    /**
     * Can change teams and permissions
     */
    can_change_teams?: boolean;
    can_change_organiser_settings?: boolean;
    can_change_event_settings?: boolean;
    /**
     * Can work with and change proposals
     */
    can_change_submissions?: boolean;
    /**
     * Is a reviewer
     */
    is_reviewer?: boolean;
    /**
     * Always hide speaker names
     * Normally, anonymisation is configured in the event review settings. This setting will <strong>override the event settings</strong> and always hide speaker names for this team.
     */
    force_hide_speaker_names?: boolean;
};

export type TimezoneEnum = unknown;

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type TrackReadable = {
    readonly id: number;
    name: MultiLanguageString;
    description?: MultiLanguageString;
    color: string;
    /**
     * The position field is used to determine the order that tracks are displayed in (lowest first).
     */
    position?: number | null;
    /**
     * This track will only be shown to submitters with a matching access code.
     */
    requires_access_code?: boolean;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type TrackWritable = {
    name: MultiLanguageString;
    description?: MultiLanguageString;
    color: string;
    /**
     * The position field is used to determine the order that tracks are displayed in (lowest first).
     */
    position?: number | null;
    /**
     * This track will only be shown to submitters with a matching access code.
     */
    requires_access_code?: boolean;
};

/**
 * This serializer class will behave like the i18nfield serializer,
 * outputting a dict/object for internationalized strings, unless if
 * when it was initialized with an ``override_locale`` (taken from
 * a URL queryparam, usually), in which case the string will be cast
 * to the locale in question – relying on either a view or a middleware
 * to apply the locale manager.
 */
export type TrackRequest = {
    name: MultiLanguageString;
    description?: MultiLanguageString;
    color: string;
    /**
     * The position field is used to determine the order that tracks are displayed in (lowest first).
     */
    position?: number | null;
    /**
     * This track will only be shown to submitters with a matching access code.
     */
    requires_access_code?: boolean;
};

/**
 * * `number` - Number
 * * `string` - Text (one-line)
 * * `text` - Multi-line text
 * * `url` - URL
 * * `date` - Date
 * * `datetime` - Date and time
 * * `boolean` - Yes/No
 * * `file` - File upload
 * * `choices` - Choose one from a list
 * * `multiple_choice` - Choose multiple from a list
 */
export type VariantEnum = 'number' | 'string' | 'text' | 'url' | 'date' | 'datetime' | 'boolean' | 'file' | 'choices' | 'multiple_choice';

/**
 * * `submission.new` - Acknowledge proposal submission
 * * `submission.new.internal` - New proposal (organiser notification)
 * * `submission.state.accepted` - Proposal accepted
 * * `submission.state.rejected` - Proposal rejected
 * * `speaker.invite` - Add a speaker to a proposal (new account)
 * * `speaker.invite.existing` - Add a speaker to a proposal (existing account)
 * * `question.reminder` - Custom fields reminder
 * * `schedule.new` - New schedule published
 */
export type RoleEnum = 'submission.new' | 'submission.new.internal' | 'submission.state.accepted' | 'submission.state.rejected' | 'speaker.invite' | 'speaker.invite.existing' | 'question.reminder' | 'schedule.new';

export type ApiEventsListData = {
    body?: never;
    path?: never;
    query?: {
        is_public?: boolean;
        /**
         * A search term, searching in `"name"`.
         */
        q?: string;
    };
    url: '/api/events/';
};

export type ApiEventsListResponses = {
    200: Array<EventList>;
};

export type ApiEventsListResponse = ApiEventsListResponses[keyof ApiEventsListResponses];

export type RootRetrieveData = {
    body?: never;
    path: {
        /**
         * Short form
         * The slug may only contain letters, numbers, dots and dashes.
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/';
};

export type RootRetrieveResponses = {
    200: EventReadable;
};

export type RootRetrieveResponse = RootRetrieveResponses[keyof RootRetrieveResponses];

export type AccessCodesListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'submission_type' | 'track'>;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"code"`.
         */
        q?: string;
    };
    url: '/api/events/{event}/access-codes/';
};

export type AccessCodesListResponses = {
    200: PaginatedSubmitterAccessCodeListReadable;
};

export type AccessCodesListResponse = AccessCodesListResponses[keyof AccessCodesListResponses];

export type AccessCodesCreateData = {
    body: SubmitterAccessCodeRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/access-codes/';
};

export type AccessCodesCreateResponses = {
    201: SubmitterAccessCodeReadable;
};

export type AccessCodesCreateResponse = AccessCodesCreateResponses[keyof AccessCodesCreateResponses];

export type AccessCodesDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this submitter access code.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/access-codes/{id}/';
};

export type AccessCodesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type AccessCodesDestroyResponse = AccessCodesDestroyResponses[keyof AccessCodesDestroyResponses];

export type AccessCodesRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this submitter access code.
         */
        id: number;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'submission_type' | 'track'>;
    };
    url: '/api/events/{event}/access-codes/{id}/';
};

export type AccessCodesRetrieveResponses = {
    200: SubmitterAccessCodeReadable;
};

export type AccessCodesRetrieveResponse = AccessCodesRetrieveResponses[keyof AccessCodesRetrieveResponses];

export type AccessCodesPartialUpdateData = {
    body: SubmitterAccessCodeRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this submitter access code.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/access-codes/{id}/';
};

export type AccessCodesPartialUpdateResponses = {
    200: SubmitterAccessCodeReadable;
};

export type AccessCodesPartialUpdateResponse = AccessCodesPartialUpdateResponses[keyof AccessCodesPartialUpdateResponses];

export type AccessCodesUpdateData = {
    body: SubmitterAccessCodeRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this submitter access code.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/access-codes/{id}/';
};

export type AccessCodesUpdateResponses = {
    200: SubmitterAccessCodeReadable;
};

export type AccessCodesUpdateResponse = AccessCodesUpdateResponses[keyof AccessCodesUpdateResponses];

export type AnswersListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'options' | 'question' | 'question.submission_types' | 'question.tracks'>;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        person?: string;
        /**
         * A search term, searching in `"answer"`.
         */
        q?: string;
        question?: number;
        review?: number;
        submission?: string;
    };
    url: '/api/events/{event}/answers/';
};

export type AnswersListResponses = {
    200: PaginatedAnswerListReadable;
};

export type AnswersListResponse = AnswersListResponses[keyof AnswersListResponses];

export type AnswersCreateData = {
    body: AnswerCreateRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/answers/';
};

export type AnswersCreateResponses = {
    201: AnswerCreateReadable;
};

export type AnswersCreateResponse = AnswersCreateResponses[keyof AnswersCreateResponses];

export type AnswersDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this answer.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/answers/{id}/';
};

export type AnswersDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type AnswersDestroyResponse = AnswersDestroyResponses[keyof AnswersDestroyResponses];

export type AnswersRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this answer.
         */
        id: number;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'options' | 'question' | 'question.submission_types' | 'question.tracks'>;
    };
    url: '/api/events/{event}/answers/{id}/';
};

export type AnswersRetrieveResponses = {
    200: AnswerReadable;
};

export type AnswersRetrieveResponse = AnswersRetrieveResponses[keyof AnswersRetrieveResponses];

export type AnswersPartialUpdateData = {
    body: AnswerRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this answer.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/answers/{id}/';
};

export type AnswersPartialUpdateResponses = {
    200: AnswerReadable;
};

export type AnswersPartialUpdateResponse = AnswersPartialUpdateResponses[keyof AnswersPartialUpdateResponses];

export type AnswersUpdateData = {
    body: AnswerRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this answer.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/answers/{id}/';
};

export type AnswersUpdateResponses = {
    200: AnswerReadable;
};

export type AnswersUpdateResponse = AnswersUpdateResponses[keyof AnswersUpdateResponses];

export type MailTemplatesListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"role"`,`"subject"`.
         */
        q?: string;
    };
    url: '/api/events/{event}/mail-templates/';
};

export type MailTemplatesListResponses = {
    200: PaginatedMailTemplateListReadable;
};

export type MailTemplatesListResponse = MailTemplatesListResponses[keyof MailTemplatesListResponses];

export type MailTemplatesCreateData = {
    body: MailTemplateRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/mail-templates/';
};

export type MailTemplatesCreateResponses = {
    201: MailTemplateReadable;
};

export type MailTemplatesCreateResponse = MailTemplatesCreateResponses[keyof MailTemplatesCreateResponses];

export type MailTemplatesDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this mail template.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/mail-templates/{id}/';
};

export type MailTemplatesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type MailTemplatesDestroyResponse = MailTemplatesDestroyResponses[keyof MailTemplatesDestroyResponses];

export type MailTemplatesRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this mail template.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/mail-templates/{id}/';
};

export type MailTemplatesRetrieveResponses = {
    200: MailTemplateReadable;
};

export type MailTemplatesRetrieveResponse = MailTemplatesRetrieveResponses[keyof MailTemplatesRetrieveResponses];

export type MailTemplatesPartialUpdateData = {
    body: MailTemplateRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this mail template.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/mail-templates/{id}/';
};

export type MailTemplatesPartialUpdateResponses = {
    200: MailTemplateReadable;
};

export type MailTemplatesPartialUpdateResponse = MailTemplatesPartialUpdateResponses[keyof MailTemplatesPartialUpdateResponses];

export type MailTemplatesUpdateData = {
    body: MailTemplateRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this mail template.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/mail-templates/{id}/';
};

export type MailTemplatesUpdateResponses = {
    200: MailTemplateReadable;
};

export type MailTemplatesUpdateResponse = MailTemplatesUpdateResponses[keyof MailTemplatesUpdateResponses];

export type QuestionOptionsListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'question' | 'question.submission_types' | 'question.tracks'>;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"answer"`.
         */
        q?: string;
        question?: number;
    };
    url: '/api/events/{event}/question-options/';
};

export type QuestionOptionsListResponses = {
    200: PaginatedAnswerOptionListReadable;
};

export type QuestionOptionsListResponse = QuestionOptionsListResponses[keyof QuestionOptionsListResponses];

export type QuestionOptionsCreateData = {
    body: AnswerOptionCreateRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/question-options/';
};

export type QuestionOptionsCreateResponses = {
    201: AnswerOptionCreateReadable;
};

export type QuestionOptionsCreateResponse = QuestionOptionsCreateResponses[keyof QuestionOptionsCreateResponses];

export type QuestionOptionsDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this answer option.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/question-options/{id}/';
};

export type QuestionOptionsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type QuestionOptionsDestroyResponse = QuestionOptionsDestroyResponses[keyof QuestionOptionsDestroyResponses];

export type QuestionOptionsRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this answer option.
         */
        id: number;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'question' | 'question.submission_types' | 'question.tracks'>;
    };
    url: '/api/events/{event}/question-options/{id}/';
};

export type QuestionOptionsRetrieveResponses = {
    200: AnswerOptionReadable;
};

export type QuestionOptionsRetrieveResponse = QuestionOptionsRetrieveResponses[keyof QuestionOptionsRetrieveResponses];

export type QuestionOptionsPartialUpdateData = {
    body: AnswerOptionRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this answer option.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/question-options/{id}/';
};

export type QuestionOptionsPartialUpdateResponses = {
    200: AnswerOptionReadable;
};

export type QuestionOptionsPartialUpdateResponse = QuestionOptionsPartialUpdateResponses[keyof QuestionOptionsPartialUpdateResponses];

export type QuestionOptionsUpdateData = {
    body: AnswerOptionRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this answer option.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/question-options/{id}/';
};

export type QuestionOptionsUpdateResponses = {
    200: AnswerOptionReadable;
};

export type QuestionOptionsUpdateResponse = QuestionOptionsUpdateResponses[keyof QuestionOptionsUpdateResponses];

export type QuestionsListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'options' | 'submission_types' | 'tracks'>;
        is_public?: boolean;
        is_visible_to_reviewers?: boolean;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"question"`.
         */
        q?: string;
        /**
         * Field type
         * Do you require an answer from every speaker or for every session?
         *
         * * `submission` - per proposal
         * * `speaker` - per speaker
         * * `reviewer` - for reviewers
         */
        target?: 'reviewer' | 'speaker' | 'submission';
        /**
         * * `number` - Number
         * * `string` - Text (one-line)
         * * `text` - Multi-line text
         * * `url` - URL
         * * `date` - Date
         * * `datetime` - Date and time
         * * `boolean` - Yes/No
         * * `file` - File upload
         * * `choices` - Choose one from a list
         * * `multiple_choice` - Choose multiple from a list
         */
        variant?: 'boolean' | 'choices' | 'date' | 'datetime' | 'file' | 'multiple_choice' | 'number' | 'string' | 'text' | 'url';
    };
    url: '/api/events/{event}/questions/';
};

export type QuestionsListResponses = {
    200: PaginatedQuestionListReadable;
};

export type QuestionsListResponse = QuestionsListResponses[keyof QuestionsListResponses];

export type QuestionsCreateData = {
    body: QuestionOrgaRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/questions/';
};

export type QuestionsCreateResponses = {
    201: QuestionOrgaReadable;
};

export type QuestionsCreateResponse = QuestionsCreateResponses[keyof QuestionsCreateResponses];

export type QuestionsDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this question.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/questions/{id}/';
};

export type QuestionsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type QuestionsDestroyResponse = QuestionsDestroyResponses[keyof QuestionsDestroyResponses];

export type QuestionsRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this question.
         */
        id: number;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'options' | 'submission_types' | 'tracks'>;
    };
    url: '/api/events/{event}/questions/{id}/';
};

export type QuestionsRetrieveResponses = {
    200: QuestionReadable;
};

export type QuestionsRetrieveResponse = QuestionsRetrieveResponses[keyof QuestionsRetrieveResponses];

export type QuestionsPartialUpdateData = {
    body: QuestionOrgaRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this question.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/questions/{id}/';
};

export type QuestionsPartialUpdateResponses = {
    200: QuestionOrgaReadable;
};

export type QuestionsPartialUpdateResponse = QuestionsPartialUpdateResponses[keyof QuestionsPartialUpdateResponses];

export type QuestionsUpdateData = {
    body: QuestionOrgaRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this question.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/questions/{id}/';
};

export type QuestionsUpdateResponses = {
    200: QuestionOrgaReadable;
};

export type QuestionsUpdateResponse = QuestionsUpdateResponses[keyof QuestionsUpdateResponses];

export type ReviewsListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'scores.category' | 'submission' | 'submission.speakers' | 'submission.submission_type' | 'submission.tags' | 'submission.track' | 'user'>;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"submission.title"`,`"user.name"`.
         */
        q?: string;
        /**
         * Filter by speaker code (for the submission being reviewed)
         */
        speaker?: number;
        /**
         * Filter by submission code
         */
        submission?: number;
        /**
         * Filter by reviewer code
         */
        user?: number;
    };
    url: '/api/events/{event}/reviews/';
};

export type ReviewsListResponses = {
    200: PaginatedReviewListReadable;
};

export type ReviewsListResponse = ReviewsListResponses[keyof ReviewsListResponses];

export type ReviewsCreateData = {
    body: ReviewWriteRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/reviews/';
};

export type ReviewsCreateResponses = {
    201: ReviewReadable;
};

export type ReviewsCreateResponse = ReviewsCreateResponses[keyof ReviewsCreateResponses];

export type ReviewsDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this review.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/reviews/{id}/';
};

export type ReviewsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ReviewsDestroyResponse = ReviewsDestroyResponses[keyof ReviewsDestroyResponses];

export type ReviewsRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this review.
         */
        id: number;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'scores.category' | 'submission' | 'user'>;
    };
    url: '/api/events/{event}/reviews/{id}/';
};

export type ReviewsRetrieveResponses = {
    200: ReviewReadable;
};

export type ReviewsRetrieveResponse = ReviewsRetrieveResponses[keyof ReviewsRetrieveResponses];

export type ReviewsPartialUpdateData = {
    body: ReviewWriteRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this review.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/reviews/{id}/';
};

export type ReviewsPartialUpdateResponses = {
    200: ReviewReadable;
};

export type ReviewsPartialUpdateResponse = ReviewsPartialUpdateResponses[keyof ReviewsPartialUpdateResponses];

export type ReviewsUpdateData = {
    body: ReviewWriteRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this review.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/reviews/{id}/';
};

export type ReviewsUpdateResponses = {
    200: ReviewReadable;
};

export type ReviewsUpdateResponse = ReviewsUpdateResponses[keyof ReviewsUpdateResponses];

export type RoomsListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * A search term, searching in `"name"`.
         */
        q?: string;
    };
    url: '/api/events/{event}/rooms/';
};

export type RoomsListResponses = {
    200: PaginatedRoomListReadable;
};

export type RoomsListResponse = RoomsListResponses[keyof RoomsListResponses];

export type RoomsCreateData = {
    body: RoomOrgaRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/rooms/';
};

export type RoomsCreateResponses = {
    201: RoomOrgaReadable;
};

export type RoomsCreateResponse = RoomsCreateResponses[keyof RoomsCreateResponses];

export type RoomsDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this room.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/rooms/{id}/';
};

export type RoomsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type RoomsDestroyResponse = RoomsDestroyResponses[keyof RoomsDestroyResponses];

export type RoomsRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this room.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/rooms/{id}/';
};

export type RoomsRetrieveResponses = {
    200: RoomReadable;
};

export type RoomsRetrieveResponse = RoomsRetrieveResponses[keyof RoomsRetrieveResponses];

export type RoomsPartialUpdateData = {
    body: RoomOrgaRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this room.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/rooms/{id}/';
};

export type RoomsPartialUpdateResponses = {
    200: RoomOrgaReadable;
};

export type RoomsPartialUpdateResponse = RoomsPartialUpdateResponses[keyof RoomsPartialUpdateResponses];

export type RoomsUpdateData = {
    body: RoomOrgaRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this room.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/rooms/{id}/';
};

export type RoomsUpdateResponses = {
    200: RoomOrgaReadable;
};

export type RoomsUpdateResponse = RoomsUpdateResponses[keyof RoomsUpdateResponses];

export type SchedulesListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"version"`.
         */
        q?: string;
    };
    url: '/api/events/{event}/schedules/';
};

export type SchedulesListResponses = {
    200: PaginatedScheduleListListReadable;
};

export type SchedulesListResponse = SchedulesListResponses[keyof SchedulesListResponses];

export type SchedulesRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        id: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'slots' | 'slots.room' | 'slots.submission' | 'slots.submission.speakers' | 'slots.submission.submission_type' | 'slots.submission.track'>;
    };
    url: '/api/events/{event}/schedules/{id}/';
};

export type SchedulesRetrieveResponses = {
    200: ScheduleReadable;
};

export type SchedulesRetrieveResponse = SchedulesRetrieveResponses[keyof SchedulesRetrieveResponses];

export type SchedulesExportersRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        id: string;
        /**
         * The name of the exporter.
         */
        name: string;
    };
    query?: {
        /**
         * Language code for the export content.
         */
        lang?: string;
    };
    url: '/api/events/{event}/schedules/{id}/exporters/{name}/';
};

export type SchedulesExportersRetrieveErrors = {
    /**
     * Exporter or schedule not found.
     */
    404: unknown;
};

export type SchedulesExportersRetrieveResponses = {
    /**
     * Format depends on the chosen exporter.
     */
    200: unknown;
};

export type SchedulesByVersionRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query: {
        /**
         * The version string/name of the schedule (e.g., '1.0', 'Final Version').
         */
        version: string;
    };
    url: '/api/events/{event}/schedules/by-version/';
};

export type SchedulesByVersionRetrieveErrors = {
    /**
     * No response body
     */
    404: unknown;
};

export type SchedulesReleaseCreateData = {
    body: ScheduleReleaseRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/schedules/release/';
};

export type SchedulesReleaseCreateErrors = {
    /**
     * Invalid data provided (e.g., version name already exists).
     */
    400: unknown;
    /**
     * Permission denied.
     */
    403: unknown;
};

export type SchedulesReleaseCreateResponses = {
    /**
     * Schedule released successfully.
     */
    201: ScheduleReadable;
};

export type SchedulesReleaseCreateResponse = SchedulesReleaseCreateResponses[keyof SchedulesReleaseCreateResponses];

export type SlotsListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'room' | 'schedule' | 'submission' | 'submission.answers' | 'submission.answers.question' | 'submission.resources' | 'submission.speakers' | 'submission.submission_type' | 'submission.track'>;
        is_visible?: boolean;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"submission.title"`,`"submission.speakers.name"`.
         */
        q?: string;
        room?: number;
        schedule?: number;
        schedule_version?: string | null;
        speaker?: number;
        submission?: number;
    };
    url: '/api/events/{event}/slots/';
};

export type SlotsListResponses = {
    200: PaginatedTalkSlotListReadable;
};

export type SlotsListResponse = SlotsListResponses[keyof SlotsListResponses];

export type SlotsRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this talk slot.
         */
        id: number;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'room' | 'schedule' | 'submission' | 'submission.answers' | 'submission.answers.question' | 'submission.resources' | 'submission.speakers' | 'submission.submission_type' | 'submission.track'>;
    };
    url: '/api/events/{event}/slots/{id}/';
};

export type SlotsRetrieveResponses = {
    200: TalkSlotReadable;
};

export type SlotsRetrieveResponse = SlotsRetrieveResponses[keyof SlotsRetrieveResponses];

export type SlotsPartialUpdateData = {
    body: TalkSlotRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this talk slot.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/slots/{id}/';
};

export type SlotsPartialUpdateResponses = {
    200: TalkSlotReadable;
};

export type SlotsPartialUpdateResponse = SlotsPartialUpdateResponses[keyof SlotsPartialUpdateResponses];

export type SlotsUpdateData = {
    body: TalkSlotRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this talk slot.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/slots/{id}/';
};

export type SlotsUpdateResponses = {
    200: TalkSlotReadable;
};

export type SlotsUpdateResponse = SlotsUpdateResponses[keyof SlotsUpdateResponses];

export type SlotsIcalRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this talk slot.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/slots/{id}/ical/';
};

export type SlotsIcalRetrieveResponses = {
    200: TalkSlotReadable;
};

export type SlotsIcalRetrieveResponse = SlotsIcalRetrieveResponses[keyof SlotsIcalRetrieveResponses];

export type SpeakerInformationListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'limit_tracks' | 'limit_types'>;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"title"`.
         */
        q?: string;
    };
    url: '/api/events/{event}/speaker-information/';
};

export type SpeakerInformationListResponses = {
    200: PaginatedSpeakerInformationListReadable;
};

export type SpeakerInformationListResponse = SpeakerInformationListResponses[keyof SpeakerInformationListResponses];

export type SpeakerInformationCreateData = {
    body: SpeakerInformationRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/speaker-information/';
};

export type SpeakerInformationCreateResponses = {
    201: SpeakerInformationReadable;
};

export type SpeakerInformationCreateResponse = SpeakerInformationCreateResponses[keyof SpeakerInformationCreateResponses];

export type SpeakerInformationDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this speaker information.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/speaker-information/{id}/';
};

export type SpeakerInformationDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type SpeakerInformationDestroyResponse = SpeakerInformationDestroyResponses[keyof SpeakerInformationDestroyResponses];

export type SpeakerInformationRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this speaker information.
         */
        id: number;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'limit_tracks' | 'limit_types'>;
    };
    url: '/api/events/{event}/speaker-information/{id}/';
};

export type SpeakerInformationRetrieveResponses = {
    200: SpeakerInformationReadable;
};

export type SpeakerInformationRetrieveResponse = SpeakerInformationRetrieveResponses[keyof SpeakerInformationRetrieveResponses];

export type SpeakerInformationPartialUpdateData = {
    body: SpeakerInformationRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this speaker information.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/speaker-information/{id}/';
};

export type SpeakerInformationPartialUpdateResponses = {
    200: SpeakerInformationReadable;
};

export type SpeakerInformationPartialUpdateResponse = SpeakerInformationPartialUpdateResponses[keyof SpeakerInformationPartialUpdateResponses];

export type SpeakerInformationUpdateData = {
    body: SpeakerInformationRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this speaker information.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/speaker-information/{id}/';
};

export type SpeakerInformationUpdateResponses = {
    200: SpeakerInformationReadable;
};

export type SpeakerInformationUpdateResponse = SpeakerInformationUpdateResponses[keyof SpeakerInformationUpdateResponses];

export type SpeakersListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'answers' | 'answers.question' | 'submissions'>;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"name"`. Organiser search also includes email addresses.
         */
        q?: string;
    };
    url: '/api/events/{event}/speakers/';
};

export type SpeakersListResponses = {
    200: PaginatedSpeakerListReadable;
};

export type SpeakersListResponse = SpeakersListResponses[keyof SpeakersListResponses];

export type SpeakersRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        user__code__iexact: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'answers' | 'answers.question' | 'submissions'>;
    };
    url: '/api/events/{event}/speakers/{user__code__iexact}/';
};

export type SpeakersRetrieveResponses = {
    200: SpeakerReadable;
};

export type SpeakersRetrieveResponse = SpeakersRetrieveResponses[keyof SpeakersRetrieveResponses];

export type SpeakersPartialUpdateData = {
    body: SpeakerUpdateRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        user__code__iexact: string;
    };
    query?: never;
    url: '/api/events/{event}/speakers/{user__code__iexact}/';
};

export type SpeakersPartialUpdateResponses = {
    200: SpeakerOrgaReadable;
};

export type SpeakersPartialUpdateResponse = SpeakersPartialUpdateResponses[keyof SpeakersPartialUpdateResponses];

export type SpeakersUpdateData = {
    body: SpeakerUpdateRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        user__code__iexact: string;
    };
    query?: never;
    url: '/api/events/{event}/speakers/{user__code__iexact}/';
};

export type SpeakersUpdateResponses = {
    200: SpeakerOrgaReadable;
};

export type SpeakersUpdateResponse = SpeakersUpdateResponses[keyof SpeakersUpdateResponses];

export type SubmissionTypesListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"name"`.
         */
        q?: string;
    };
    url: '/api/events/{event}/submission-types/';
};

export type SubmissionTypesListResponses = {
    200: PaginatedSubmissionTypeListReadable;
};

export type SubmissionTypesListResponse = SubmissionTypesListResponses[keyof SubmissionTypesListResponses];

export type SubmissionTypesCreateData = {
    body: SubmissionTypeRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submission-types/';
};

export type SubmissionTypesCreateResponses = {
    201: SubmissionTypeReadable;
};

export type SubmissionTypesCreateResponse = SubmissionTypesCreateResponses[keyof SubmissionTypesCreateResponses];

export type SubmissionTypesDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this submission type.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/submission-types/{id}/';
};

export type SubmissionTypesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type SubmissionTypesDestroyResponse = SubmissionTypesDestroyResponses[keyof SubmissionTypesDestroyResponses];

export type SubmissionTypesRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this submission type.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/submission-types/{id}/';
};

export type SubmissionTypesRetrieveResponses = {
    200: SubmissionTypeReadable;
};

export type SubmissionTypesRetrieveResponse = SubmissionTypesRetrieveResponses[keyof SubmissionTypesRetrieveResponses];

export type SubmissionTypesPartialUpdateData = {
    body: SubmissionTypeRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this submission type.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/submission-types/{id}/';
};

export type SubmissionTypesPartialUpdateResponses = {
    200: SubmissionTypeReadable;
};

export type SubmissionTypesPartialUpdateResponse = SubmissionTypesPartialUpdateResponses[keyof SubmissionTypesPartialUpdateResponses];

export type SubmissionTypesUpdateData = {
    body: SubmissionTypeRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this submission type.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/submission-types/{id}/';
};

export type SubmissionTypesUpdateResponses = {
    200: SubmissionTypeReadable;
};

export type SubmissionTypesUpdateResponse = SubmissionTypesUpdateResponses[keyof SubmissionTypesUpdateResponses];

export type SubmissionsListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        content_locale?: string;
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'answers' | 'answers.question' | 'resources' | 'slots' | 'slots.room' | 'speakers' | 'speakers.answers' | 'submission_type' | 'tags' | 'track'>;
        is_featured?: boolean;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * * `submitted` - submitted
         * * `accepted` - accepted
         * * `confirmed` - confirmed
         * * `rejected` - rejected
         * * `canceled` - canceled
         * * `withdrawn` - withdrawn
         * * `deleted` - deleted
         * * `draft` - draft
         */
        pending_state?: Array<'accepted' | 'canceled' | 'confirmed' | 'deleted' | 'draft' | 'rejected' | 'submitted' | 'withdrawn'>;
        /**
         * A search term, searching in `"title"`,`"speaker.name"`.
         */
        q?: string;
        /**
         * * `submitted` - submitted
         * * `accepted` - accepted
         * * `confirmed` - confirmed
         * * `rejected` - rejected
         * * `canceled` - canceled
         * * `withdrawn` - withdrawn
         * * `deleted` - deleted
         * * `draft` - draft
         */
        state?: Array<'accepted' | 'canceled' | 'confirmed' | 'deleted' | 'draft' | 'rejected' | 'submitted' | 'withdrawn'>;
        submission_type?: number;
    };
    url: '/api/events/{event}/submissions/';
};

export type SubmissionsListResponses = {
    200: PaginatedSubmissionListReadable;
};

export type SubmissionsListResponse = SubmissionsListResponses[keyof SubmissionsListResponses];

export type SubmissionsCreateData = {
    body: SubmissionOrgaRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/';
};

export type SubmissionsCreateResponses = {
    200: SubmissionOrgaReadable;
};

export type SubmissionsCreateResponse = SubmissionsCreateResponses[keyof SubmissionsCreateResponses];

export type SubmissionsDestroyData = {
    body?: never;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/';
};

export type SubmissionsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type SubmissionsDestroyResponse = SubmissionsDestroyResponses[keyof SubmissionsDestroyResponses];

export type SubmissionsRetrieveData = {
    body?: never;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'answers' | 'resources' | 'slots' | 'slots.room' | 'speakers' | 'submission_type' | 'tags' | 'track'>;
    };
    url: '/api/events/{event}/submissions/{code__iexact}/';
};

export type SubmissionsRetrieveResponses = {
    200: SubmissionReadable;
};

export type SubmissionsRetrieveResponse = SubmissionsRetrieveResponses[keyof SubmissionsRetrieveResponses];

export type SubmissionsPartialUpdateData = {
    body: SubmissionOrgaRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/';
};

export type SubmissionsPartialUpdateResponses = {
    200: SubmissionOrgaReadable;
};

export type SubmissionsPartialUpdateResponse = SubmissionsPartialUpdateResponses[keyof SubmissionsPartialUpdateResponses];

export type SubmissionsUpdateData = {
    body: SubmissionOrgaRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/';
};

export type SubmissionsUpdateResponses = {
    200: SubmissionOrgaReadable;
};

export type SubmissionsUpdateResponse = SubmissionsUpdateResponses[keyof SubmissionsUpdateResponses];

export type SubmissionsAcceptCreateData = {
    body: SubmissionRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/accept/';
};

export type SubmissionsAcceptCreateResponses = {
    200: SubmissionReadable;
};

export type SubmissionsAcceptCreateResponse = SubmissionsAcceptCreateResponses[keyof SubmissionsAcceptCreateResponses];

export type SubmissionsAddSpeakerCreateData = {
    body: AddSpeakerRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/add-speaker/';
};

export type SubmissionsAddSpeakerCreateResponses = {
    200: SubmissionOrgaReadable;
};

export type SubmissionsAddSpeakerCreateResponse = SubmissionsAddSpeakerCreateResponses[keyof SubmissionsAddSpeakerCreateResponses];

export type SubmissionsCancelCreateData = {
    body: SubmissionRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/cancel/';
};

export type SubmissionsCancelCreateResponses = {
    200: SubmissionReadable;
};

export type SubmissionsCancelCreateResponse = SubmissionsCancelCreateResponses[keyof SubmissionsCancelCreateResponses];

export type SubmissionsConfirmCreateData = {
    body: SubmissionRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/confirm/';
};

export type SubmissionsConfirmCreateResponses = {
    200: SubmissionReadable;
};

export type SubmissionsConfirmCreateResponse = SubmissionsConfirmCreateResponses[keyof SubmissionsConfirmCreateResponses];

export type SubmissionsMakeSubmittedCreateData = {
    body: SubmissionRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/make-submitted/';
};

export type SubmissionsMakeSubmittedCreateResponses = {
    200: SubmissionReadable;
};

export type SubmissionsMakeSubmittedCreateResponse = SubmissionsMakeSubmittedCreateResponses[keyof SubmissionsMakeSubmittedCreateResponses];

export type SubmissionsRejectCreateData = {
    body: SubmissionRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/reject/';
};

export type SubmissionsRejectCreateResponses = {
    200: SubmissionReadable;
};

export type SubmissionsRejectCreateResponse = SubmissionsRejectCreateResponses[keyof SubmissionsRejectCreateResponses];

export type SubmissionsRemoveSpeakerCreateData = {
    body: RemoveSpeakerRequest;
    path: {
        code__iexact: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code__iexact}/remove-speaker/';
};

export type SubmissionsRemoveSpeakerCreateResponses = {
    200: SubmissionOrgaReadable;
};

export type SubmissionsRemoveSpeakerCreateResponse = SubmissionsRemoveSpeakerCreateResponses[keyof SubmissionsRemoveSpeakerCreateResponses];

export type SubmissionsFavouriteDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        code: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code}/favourite/';
};

export type SubmissionsFavouriteDestroyErrors = {
    /**
     * Submission not found.
     */
    404: unknown;
};

export type SubmissionsFavouriteDestroyResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type SubmissionsFavouriteCreateData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        code: string;
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/{code}/favourite/';
};

export type SubmissionsFavouriteCreateErrors = {
    /**
     * Submission not found.
     */
    404: unknown;
};

export type SubmissionsFavouriteCreateResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type SubmissionsFavouritesRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/submissions/favourites/';
};

export type SubmissionsFavouritesRetrieveResponses = {
    200: Array<string>;
};

export type SubmissionsFavouritesRetrieveResponse = SubmissionsFavouritesRetrieveResponses[keyof SubmissionsFavouritesRetrieveResponses];

export type TagsListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"tag"`.
         */
        q?: string;
    };
    url: '/api/events/{event}/tags/';
};

export type TagsListResponses = {
    200: PaginatedTagListReadable;
};

export type TagsListResponse = TagsListResponses[keyof TagsListResponses];

export type TagsCreateData = {
    body: TagRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/tags/';
};

export type TagsCreateResponses = {
    201: TagReadable;
};

export type TagsCreateResponse = TagsCreateResponses[keyof TagsCreateResponses];

export type TagsDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this tag.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/tags/{id}/';
};

export type TagsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type TagsDestroyResponse = TagsDestroyResponses[keyof TagsDestroyResponses];

export type TagsRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this tag.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/tags/{id}/';
};

export type TagsRetrieveResponses = {
    200: TagReadable;
};

export type TagsRetrieveResponse = TagsRetrieveResponses[keyof TagsRetrieveResponses];

export type TagsPartialUpdateData = {
    body: TagRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this tag.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/tags/{id}/';
};

export type TagsPartialUpdateResponses = {
    200: TagReadable;
};

export type TagsPartialUpdateResponse = TagsPartialUpdateResponses[keyof TagsPartialUpdateResponses];

export type TagsUpdateData = {
    body: TagRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this tag.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/tags/{id}/';
};

export type TagsUpdateResponses = {
    200: TagReadable;
};

export type TagsUpdateResponse = TagsUpdateResponses[keyof TagsUpdateResponses];

export type TracksListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"name"`.
         */
        q?: string;
    };
    url: '/api/events/{event}/tracks/';
};

export type TracksListResponses = {
    200: PaginatedTrackListReadable;
};

export type TracksListResponse = TracksListResponses[keyof TracksListResponses];

export type TracksCreateData = {
    body: TrackRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
    };
    query?: never;
    url: '/api/events/{event}/tracks/';
};

export type TracksCreateResponses = {
    201: TrackReadable;
};

export type TracksCreateResponse = TracksCreateResponses[keyof TracksCreateResponses];

export type TracksDestroyData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this track.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/tracks/{id}/';
};

export type TracksDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type TracksDestroyResponse = TracksDestroyResponses[keyof TracksDestroyResponses];

export type TracksRetrieveData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this track.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/tracks/{id}/';
};

export type TracksRetrieveResponses = {
    200: TrackReadable;
};

export type TracksRetrieveResponse = TracksRetrieveResponses[keyof TracksRetrieveResponses];

export type TracksPartialUpdateData = {
    body: TrackRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this track.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/tracks/{id}/';
};

export type TracksPartialUpdateResponses = {
    200: TrackReadable;
};

export type TracksPartialUpdateResponse = TracksPartialUpdateResponses[keyof TracksPartialUpdateResponses];

export type TracksUpdateData = {
    body: TrackRequest;
    path: {
        /**
         * The event’s slug
         */
        event: string;
        /**
         * A unique integer value identifying this track.
         */
        id: number;
    };
    query?: never;
    url: '/api/events/{event}/tracks/{id}/';
};

export type TracksUpdateResponses = {
    200: TrackReadable;
};

export type TracksUpdateResponse = TracksUpdateResponses[keyof TracksUpdateResponses];

export type ApiOrganisersTeamsListData = {
    body?: never;
    path: {
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'invites' | 'limit_tracks' | 'members'>;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        /**
         * Number of results to return per page.
         */
        page_size?: number;
        /**
         * A search term, searching in `"name"`.
         */
        q?: string;
    };
    url: '/api/organisers/{organiser}/teams/';
};

export type ApiOrganisersTeamsListResponses = {
    200: PaginatedTeamListReadable;
};

export type ApiOrganisersTeamsListResponse = ApiOrganisersTeamsListResponses[keyof ApiOrganisersTeamsListResponses];

export type ApiOrganisersTeamsCreateData = {
    body: TeamRequest;
    path: {
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: never;
    url: '/api/organisers/{organiser}/teams/';
};

export type ApiOrganisersTeamsCreateResponses = {
    201: TeamReadable;
};

export type ApiOrganisersTeamsCreateResponse = ApiOrganisersTeamsCreateResponses[keyof ApiOrganisersTeamsCreateResponses];

export type ApiOrganisersTeamsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this team.
         */
        id: number;
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: never;
    url: '/api/organisers/{organiser}/teams/{id}/';
};

export type ApiOrganisersTeamsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ApiOrganisersTeamsDestroyResponse = ApiOrganisersTeamsDestroyResponses[keyof ApiOrganisersTeamsDestroyResponses];

export type ApiOrganisersTeamsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this team.
         */
        id: number;
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: {
        /**
         * Select fields to <a href="https://docs.pretalx.org/api/fundamentals/#expanding-linked-resources">expand</a>.
         */
        expand?: Array<'invites' | 'limit_tracks' | 'members'>;
    };
    url: '/api/organisers/{organiser}/teams/{id}/';
};

export type ApiOrganisersTeamsRetrieveResponses = {
    200: TeamReadable;
};

export type ApiOrganisersTeamsRetrieveResponse = ApiOrganisersTeamsRetrieveResponses[keyof ApiOrganisersTeamsRetrieveResponses];

export type ApiOrganisersTeamsPartialUpdateData = {
    body: TeamRequest;
    path: {
        /**
         * A unique integer value identifying this team.
         */
        id: number;
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: never;
    url: '/api/organisers/{organiser}/teams/{id}/';
};

export type ApiOrganisersTeamsPartialUpdateResponses = {
    200: TeamReadable;
};

export type ApiOrganisersTeamsPartialUpdateResponse = ApiOrganisersTeamsPartialUpdateResponses[keyof ApiOrganisersTeamsPartialUpdateResponses];

export type ApiOrganisersTeamsUpdateData = {
    body: TeamRequest;
    path: {
        /**
         * A unique integer value identifying this team.
         */
        id: number;
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: never;
    url: '/api/organisers/{organiser}/teams/{id}/';
};

export type ApiOrganisersTeamsUpdateResponses = {
    200: TeamReadable;
};

export type ApiOrganisersTeamsUpdateResponse = ApiOrganisersTeamsUpdateResponses[keyof ApiOrganisersTeamsUpdateResponses];

export type ApiOrganisersTeamsInviteCreateData = {
    body: TeamInviteCreateRequest;
    path: {
        /**
         * A unique integer value identifying this team.
         */
        id: number;
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: never;
    url: '/api/organisers/{organiser}/teams/{id}/invite/';
};

export type ApiOrganisersTeamsInviteCreateResponses = {
    200: TeamReadable;
};

export type ApiOrganisersTeamsInviteCreateResponse = ApiOrganisersTeamsInviteCreateResponses[keyof ApiOrganisersTeamsInviteCreateResponses];

export type ApiOrganisersTeamsInvitesDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this team.
         */
        id: number;
        invite_id: number;
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: never;
    url: '/api/organisers/{organiser}/teams/{id}/invites/{invite_id}/';
};

export type ApiOrganisersTeamsInvitesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ApiOrganisersTeamsInvitesDestroyResponse = ApiOrganisersTeamsInvitesDestroyResponses[keyof ApiOrganisersTeamsInvitesDestroyResponses];

export type ApiOrganisersTeamsRemoveMemberCreateData = {
    body: TeamMemberRemoveRequest;
    path: {
        /**
         * A unique integer value identifying this team.
         */
        id: number;
        /**
         * The event’s slug
         */
        organiser: string;
    };
    query?: never;
    url: '/api/organisers/{organiser}/teams/{id}/remove_member/';
};

export type ApiOrganisersTeamsRemoveMemberCreateErrors = {
    /**
     * Member cannot be removed as it may leave events inaccessible.
     */
    400: unknown;
};

export type ApiOrganisersTeamsRemoveMemberCreateResponses = {
    /**
     * Member removed successfully.
     */
    204: void;
};

export type ApiOrganisersTeamsRemoveMemberCreateResponse = ApiOrganisersTeamsRemoveMemberCreateResponses[keyof ApiOrganisersTeamsRemoveMemberCreateResponses];

export type FileUploadData = {
    body?: {
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/api/upload/';
};

export type FileUploadErrors = {
    /**
     * Validation error
     */
    400: {
        [key: string]: unknown;
    };
};

export type FileUploadError = FileUploadErrors[keyof FileUploadErrors];

export type FileUploadResponses = {
    201: FileResponse;
};

export type FileUploadResponse = FileUploadResponses[keyof FileUploadResponses];

export type ClientOptions = {
    baseUrl: 'https://pretalx.com' | (string & {});
};